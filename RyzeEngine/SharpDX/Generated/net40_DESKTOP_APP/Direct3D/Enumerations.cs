// <auto-generated/>

namespace SharpDX.Direct3D
{
    /// <summary>
    /// <p>Driver type options.</p>
    /// </summary>
    /// <remarks>
    /// <p>The driver type is required when calling <strong>D3D11CreateDevice</strong> or <strong>D3D11CreateDeviceAndSwapChain</strong>.</p>
    /// </remarks>
    /// <doc-id>ff476328</doc-id>
    /// <unmanaged>D3D_DRIVER_TYPE</unmanaged>
    /// <unmanaged-short>D3D_DRIVER_TYPE</unmanaged-short>
    public enum DriverType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The driver type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A hardware driver, which implements Direct3D features in hardware. This is the primary driver that you should use in your Direct3D applications because it provides the best performance. A hardware driver uses hardware acceleration (on supported hardware) but can also use software for parts of the pipeline that are not supported in hardware. This driver type is often referred to as a hardware abstraction layer or HAL.</p> </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_HARDWARE</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_HARDWARE</unmanaged-short>
        Hardware = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A reference driver, which is a software implementation that supports every Direct3D feature. A reference driver is designed for accuracy rather than speed and as a result is slow but accurate. The rasterizer portion of the driver does make use of special CPU instructions whenever it can, but it is not intended for retail applications; use it only for feature testing, demonstration of functionality, debugging, or verifying bugs in other drivers. The reference device for this driver is installed by the Windows SDK 8.0 or later and is intended only as a debug aid for development purposes. This driver may be referred to as a REF driver, a reference driver, or a reference rasterizer.</p> <strong>Note</strong>??When you use the REF driver in Windows Store apps,  the REF driver renders correctly but doesn't display any output on the screen. To verify bugs in hardware drivers for Windows Store apps, use <strong>D3D_DRIVER_TYPE_WARP</strong> for the WARP driver instead. ? </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_REFERENCE</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_REFERENCE</unmanaged-short>
        Reference = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A <c>null</c> driver, which is a reference driver without render capability. This driver is commonly used for debugging non-rendering API calls, it is not appropriate for retail applications. This driver is installed by the DirectX SDK.</p> </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_NULL</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_NULL</unmanaged-short>
        Null = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>A software driver, which is a driver implemented completely in software. The software implementation is not intended for a high-performance application due to its very slow performance.</p> </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_SOFTWARE</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_SOFTWARE</unmanaged-short>
        Software = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>A WARP driver, which is a high-performance software rasterizer. The rasterizer supports <strong>feature levels</strong> 9_1 through level 10_1 with a high performance software implementation. For information about limitations creating a WARP device on certain feature levels, see Limitations Creating WARP and Reference Devices. For more information about using a WARP driver, see Windows Advanced Rasterization Platform (WARP) In-Depth Guide.</p> <strong>Note</strong>??The WARP driver that Windows?8 includes supports feature levels 9_1 through level 11_1. ? <strong>Note</strong>??The WARP driver that Windows?8.1 includes fully supports feature level 11_1, including tiled resources, <strong>IDXGIDevice3::Trim</strong>, shared BCn surfaces, minblend, and map default.  ? </dd>
        /// </summary>
        /// <doc-id>ff476328</doc-id>
        /// <unmanaged>D3D_DRIVER_TYPE_WARP</unmanaged>
        /// <unmanaged-short>D3D_DRIVER_TYPE_WARP</unmanaged-short>
        Warp = unchecked ((System.Int32)(5))}

    /// <summary>
    /// <p> Describes the set of features targeted by a Direct3D device. </p>
    /// </summary>
    /// <remarks>
    /// <p> For an overview of the capabilities of each feature level, see Overview For Each Feature Level. </p><p> For information about limitations creating non-hardware-type devices on certain feature levels, see Limitations Creating WARP and Reference Devices. </p>
    /// </remarks>
    /// <doc-id>ff476329</doc-id>
    /// <unmanaged>D3D_FEATURE_LEVEL</unmanaged>
    /// <unmanaged-short>D3D_FEATURE_LEVEL</unmanaged-short>
    public enum FeatureLevel : System.Int32
    {
        /// <summary>
        /// <dd> <p> Targets features supported by feature level 9.1 including shader model 2. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_9_1</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_9_1</unmanaged-short>
        Level_9_1 = unchecked ((System.Int32)(37120)),
        /// <summary>
        /// <dd> <p> Targets features supported by feature level 9.2 including shader model 2. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_9_2</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_9_2</unmanaged-short>
        Level_9_2 = unchecked ((System.Int32)(37376)),
        /// <summary>
        /// <dd> <p> Targets features supported by feature level 9.3 including shader model 2.0b. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_9_3</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_9_3</unmanaged-short>
        Level_9_3 = unchecked ((System.Int32)(37632)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 10.0 including shader model 4. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_10_0</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_10_0</unmanaged-short>
        Level_10_0 = unchecked ((System.Int32)(40960)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 10.1 including shader model 4. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_10_1</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_10_1</unmanaged-short>
        Level_10_1 = unchecked ((System.Int32)(41216)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 11.0 including shader model 5. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_11_0</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_11_0</unmanaged-short>
        Level_11_0 = unchecked ((System.Int32)(45056)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 11.1 including shader model 5 and logical blend operations. This feature level requires a display driver that is at least implemented to WDDM for Windows?8 (WDDM 1.2). </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_11_1</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_11_1</unmanaged-short>
        Level_11_1 = unchecked ((System.Int32)(45312)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 12.0 including shader model 5. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_12_0</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_12_0</unmanaged-short>
        Level_12_0 = unchecked ((System.Int32)(49152)),
        /// <summary>
        /// <dd> <p> Targets features supported by Direct3D 12.1 including shader model 5. </p> </dd>
        /// </summary>
        /// <doc-id>ff476329</doc-id>
        /// <unmanaged>D3D_FEATURE_LEVEL_12_1</unmanaged>
        /// <unmanaged-short>D3D_FEATURE_LEVEL_12_1</unmanaged-short>
        Level_12_1 = unchecked ((System.Int32)(49408))}

    /// <summary>
    /// <p>Specifies interpolation mode, which affects how values are calculated during rasterization.</p>
    /// </summary>
    /// <doc-id>dn280473</doc-id>
    /// <unmanaged>D3D_INTERPOLATION_MODE</unmanaged>
    /// <unmanaged-short>D3D_INTERPOLATION_MODE</unmanaged-short>
    public enum InterpolationMode : System.Int32
    {
        /// <summary>
        /// <dd> <p>The interpolation mode is undefined.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Don't interpolate between register values.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_CONSTANT</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_CONSTANT</unmanaged-short>
        Constant = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR</unmanaged-short>
        Linear = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values but centroid clamped when multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR_CENTROID</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR_CENTROID</unmanaged-short>
        LinearCentroid = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values but with no perspective correction.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE</unmanaged-short>
        LinearNoperspective = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values but with no perspective correction and centroid clamped when multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID</unmanaged-short>
        LinearNoperspectiveCentroid = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values but sample clamped when multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR_SAMPLE</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR_SAMPLE</unmanaged-short>
        LinearSample = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Interpolate linearly between register values but with no perspective correction and sample clamped when multisampling.</p> </dd>
        /// </summary>
        /// <doc-id>dn280473</doc-id>
        /// <unmanaged>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE</unmanaged>
        /// <unmanaged-short>D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE</unmanaged-short>
        LinearNoperspectiveSample = unchecked ((System.Int32)(7))}

    /// <summary>
    /// <p>Values that indicate the minimum desired interpolation precision.</p>
    /// </summary>
    /// <remarks>
    /// <p>For more info, see <strong>Scalar Types</strong> and Using HLSL minimum precision.</p>
    /// </remarks>
    /// <doc-id>jj247572</doc-id>
    /// <unmanaged>D3D_MIN_PRECISION</unmanaged>
    /// <unmanaged-short>D3D_MIN_PRECISION</unmanaged-short>
    public enum MinimumPrecision : System.Int32
    {
        /// <summary>
        /// <dd> <p>Default minimum precision, which is 32-bit precision.</p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_DEFAULT</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_DEFAULT</unmanaged-short>
        MinimumPrecisionDefault = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Minimum precision is min16float, which is 16-bit floating point. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_FLOAT_16</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_FLOAT_16</unmanaged-short>
        MinimumPrecisionFloat16 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Minimum precision is min10float, which is 10-bit floating point. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_FLOAT_2_8</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_FLOAT_2_8</unmanaged-short>
        MinimumPrecisionFloat28 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Reserved</p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_RESERVED</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_RESERVED</unmanaged-short>
        MinimumPrecisionReserved = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Minimum precision is min16int, which is 16-bit signed integer. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_SINT_16</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_SINT_16</unmanaged-short>
        MinimumPrecisionSInt16 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Minimum precision is min16uint, which is 16-bit unsigned integer. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_UINT_16</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_UINT_16</unmanaged-short>
        MinimumPrecisionUInt16 = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Minimum precision is any 16-bit value. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_ANY_16</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_ANY_16</unmanaged-short>
        MinimumPrecisionAny16 = unchecked ((System.Int32)(240)),
        /// <summary>
        /// <dd> <p>Minimum precision is any 10-bit value. </p> </dd>
        /// </summary>
        /// <doc-id>jj247572</doc-id>
        /// <unmanaged>D3D_MIN_PRECISION_ANY_10</unmanaged>
        /// <unmanaged-short>D3D_MIN_PRECISION_ANY_10</unmanaged-short>
        MinimumPrecisionAny10 = unchecked ((System.Int32)(241))}

    /// <summary>
    /// <p>Values that indicate how the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen.</p>
    /// </summary>
    /// <remarks>
    /// <p>Use the  <strong>ID3D11DeviceContext::IASetPrimitiveTopology</strong> method and a value from <strong><see cref = "SharpDX.Direct3D.PrimitiveTopology"/></strong> to bind a primitive topology to the input-assembler stage. Use the  <strong>ID3D11DeviceContext::IAGetPrimitiveTopology</strong> method to retrieve the primitive topology for the input-assembler stage.</p><p>The following diagram shows the various primitive types for a geometry shader object.</p>
    /// </remarks>
    /// <doc-id>ff728726</doc-id>
    /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY</unmanaged>
    /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY</unmanaged-short>
    public enum PrimitiveTopology : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_POINTLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_POINTLIST</unmanaged-short>
        PointList = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINELIST</unmanaged-short>
        LineList = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP</unmanaged-short>
        LineStrip = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST</unmanaged-short>
        TriangleList = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP</unmanaged-short>
        TriangleStrip = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ</unmanaged-short>
        LineListWithAdjacency = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ</unmanaged-short>
        LineStripWithAdjacency = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ</unmanaged-short>
        TriangleListWithAdjacency = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ</unmanaged-short>
        TriangleStripWithAdjacency = unchecked ((System.Int32)(13)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith1ControlPoints = unchecked ((System.Int32)(33)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith2ControlPoints = unchecked ((System.Int32)(34)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith3ControlPoints = unchecked ((System.Int32)(35)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith4ControlPoints = unchecked ((System.Int32)(36)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith5ControlPoints = unchecked ((System.Int32)(37)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith6ControlPoints = unchecked ((System.Int32)(38)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith7ControlPoints = unchecked ((System.Int32)(39)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith8ControlPoints = unchecked ((System.Int32)(40)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith9ControlPoints = unchecked ((System.Int32)(41)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith10ControlPoints = unchecked ((System.Int32)(42)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith11ControlPoints = unchecked ((System.Int32)(43)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith12ControlPoints = unchecked ((System.Int32)(44)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith13ControlPoints = unchecked ((System.Int32)(45)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith14ControlPoints = unchecked ((System.Int32)(46)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith15ControlPoints = unchecked ((System.Int32)(47)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith16ControlPoints = unchecked ((System.Int32)(48)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith17ControlPoints = unchecked ((System.Int32)(49)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith18ControlPoints = unchecked ((System.Int32)(50)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith19ControlPoints = unchecked ((System.Int32)(51)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith20ControlPoints = unchecked ((System.Int32)(52)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith21ControlPoints = unchecked ((System.Int32)(53)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith22ControlPoints = unchecked ((System.Int32)(54)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith23ControlPoints = unchecked ((System.Int32)(55)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith24ControlPoints = unchecked ((System.Int32)(56)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith25ControlPoints = unchecked ((System.Int32)(57)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith26ControlPoints = unchecked ((System.Int32)(58)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith27ControlPoints = unchecked ((System.Int32)(59)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith28ControlPoints = unchecked ((System.Int32)(60)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith29ControlPoints = unchecked ((System.Int32)(61)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith30ControlPoints = unchecked ((System.Int32)(62)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith31ControlPoints = unchecked ((System.Int32)(63)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728726</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST</unmanaged-short>
        PatchListWith32ControlPoints = unchecked ((System.Int32)(64))}

    /// <summary>
    /// <p>Values that identify the type of resource to be viewed as a shader resource.</p>
    /// </summary>
    /// <remarks>
    /// <p>A <strong><see cref = "SharpDX.Direct3D.ShaderResourceViewDimension"/></strong>-typed value is specified in the <strong>ViewDimension</strong> member of the <strong><see cref = "SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong> structure or the  <strong>Dimension</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728736</doc-id>
    /// <unmanaged>D3D_SRV_DIMENSION</unmanaged>
    /// <unmanaged-short>D3D_SRV_DIMENSION</unmanaged-short>
    public enum ShaderResourceViewDimension : System.Int32
    {
        /// <summary>
        /// <dd> <p>The type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The resource is a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The resource is a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The resource is an array of 1D textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The resource is a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The resource is an array of 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The resource is a multisampling 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DMS</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE2DMS</unmanaged-short>
        Texture2DMultisampled = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The resource is an array of multisampling 2D textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE2DMSARRAY</unmanaged-short>
        Texture2DMultisampledArray = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The resource is a 3D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The resource is a cube texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURECUBE</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURECUBE</unmanaged-short>
        TextureCube = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The resource is an array of cube textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_TEXTURECUBEARRAY</unmanaged-short>
        TextureCubeArray = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>The resource is a raw buffer. For more info about raw viewing of buffers, see Raw Views of Buffers.</p> </dd>
        /// </summary>
        /// <doc-id>ff728736</doc-id>
        /// <unmanaged>D3D_SRV_DIMENSION_BUFFEREX</unmanaged>
        /// <unmanaged-short>D3D_SRV_DIMENSION_BUFFEREX</unmanaged-short>
        ExtendedBuffer = unchecked ((System.Int32)(11))}
}