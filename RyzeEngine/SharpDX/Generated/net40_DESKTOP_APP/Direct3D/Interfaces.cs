// <auto-generated/>

namespace SharpDX.Direct3D
{
    [System.Runtime.InteropServices.GuidAttribute("8BA5FB08-5195-40e2-AC58-0D989C3A0102")]
    public partial class Blob : SharpDX.ComObject
    {
        public Blob(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Blob(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Blob(nativePtr);
        /// <summary>
        /// <p>Get a reference to the data.</p>
        /// </summary>
        /// <doc-id>bb173508</doc-id>
        /// <unmanaged>GetBufferPointer</unmanaged>
        /// <unmanaged-short>GetBufferPointer</unmanaged-short>
        public System.IntPtr BufferPointer
        {
            get => GetBufferPointer();
        }

        /// <summary>
        /// <p>Get the size.</p>
        /// </summary>
        /// <doc-id>bb173509</doc-id>
        /// <unmanaged>GetBufferSize</unmanaged>
        /// <unmanaged-short>GetBufferSize</unmanaged-short>
        public SharpDX.PointerSize BufferSize
        {
            get => GetBufferSize();
        }

        /// <summary>
        /// <p>Get a reference to the data.</p>
        /// </summary>
        /// <returns><p>Returns a reference.</p></returns>
        /// <doc-id>bb173508</doc-id>
        /// <unmanaged>void* ID3D10Blob::GetBufferPointer()</unmanaged>
        /// <unmanaged-short>ID3D10Blob::GetBufferPointer</unmanaged-short>
        internal unsafe System.IntPtr GetBufferPointer()
        {
            System.IntPtr __result__;
            __result__ = SharpDX.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Get the size.</p>
        /// </summary>
        /// <returns><p>The size of the data, in bytes.</p></returns>
        /// <doc-id>bb173509</doc-id>
        /// <unmanaged>SIZE_T ID3D10Blob::GetBufferSize()</unmanaged>
        /// <unmanaged-short>ID3D10Blob::GetBufferSize</unmanaged-short>
        internal unsafe SharpDX.PointerSize GetBufferSize()
        {
            SharpDX.PointerSize __result__;
            __result__ = SharpDX.LocalInterop.CalliStdCallvoidPtr(this._nativePointer, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("a06eb39a-50da-425b-8c31-4eecd6c270f3")]
    public partial interface DestructionNotifier : SharpDX.IUnknown
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("9B7E4E00-342C-4106-A19F-4F2704F689F0")]
    public partial class DeviceMultithread : SharpDX.ComObject
    {
        public DeviceMultithread(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator DeviceMultithread(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new DeviceMultithread(nativePtr);
        /// <summary>
        /// <p>Enter a device's critical section.</p>
        /// </summary>
        /// <remarks>
        /// <p>Entering a device's critical section prevents other threads from simultaneously calling that device's methods (if <strong>multithread protection</strong> is set to true), calling DXGI methods, and calling the methods of all resource, view, shader, state, and asynchronous interfaces.</p><p>This function should be used in multithreaded applications when there is a series of graphics commands that must happen in order. This function is typically called at the beginning of the series of graphics commands, and <strong>ID3D10Multithread::Leave</strong> is typically called after those graphics commands.</p>
        /// </remarks>
        /// <doc-id>bb173817</doc-id>
        /// <unmanaged>void ID3D10Multithread::Enter()</unmanaged>
        /// <unmanaged-short>ID3D10Multithread::Enter</unmanaged-short>
        public unsafe void Enter()
        {
            SharpDX.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[3]);
        }

        /// <summary>
        /// <p>Leave a device's critical section.</p>
        /// </summary>
        /// <remarks>
        /// <p>This function is typically used in multithreaded applications when there is a series of graphics commands that must happen in order. <strong>ID3D10Multithread::Enter</strong> is typically called at the beginning of a series of graphics commands, and this function is typically called after those graphics commands.</p>
        /// </remarks>
        /// <doc-id>bb173819</doc-id>
        /// <unmanaged>void ID3D10Multithread::Leave()</unmanaged>
        /// <unmanaged-short>ID3D10Multithread::Leave</unmanaged-short>
        public unsafe void Leave()
        {
            SharpDX.LocalInterop.CalliStdCallvoid(this._nativePointer, (*(void ***)this._nativePointer)[4]);
        }

        /// <summary>
        /// <p>Turn multithreading on or off.</p>
        /// </summary>
        /// <param name = "bMTProtect"><dd>  <p>True to turn multithreading on, false to turn it off.</p> </dd></param>
        /// <returns><p>True if multithreading was turned on prior to calling this method, false otherwise.</p></returns>
        /// <doc-id>bb173820</doc-id>
        /// <unmanaged>BOOL ID3D10Multithread::SetMultithreadProtected([In] BOOL bMTProtect)</unmanaged>
        /// <unmanaged-short>ID3D10Multithread::SetMultithreadProtected</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool SetMultithreadProtected(SharpDX.Mathematics.Interop.RawBool bMTProtect)
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool0(this._nativePointer, bMTProtect, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p>Find out if multithreading is turned on or not.</p>
        /// </summary>
        /// <returns><p>Whether or not multithreading is turned on. True means on, false means off.</p></returns>
        /// <doc-id>bb173818</doc-id>
        /// <unmanaged>BOOL ID3D10Multithread::GetMultithreadProtected()</unmanaged>
        /// <unmanaged-short>ID3D10Multithread::GetMultithreadProtected</unmanaged-short>
        public unsafe SharpDX.Mathematics.Interop.RawBool GetMultithreadProtected()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            return __result__;
        }
    }
}