// <auto-generated/>

namespace SharpDX.Direct3D
{
    /// <summary>
    /// <p>Defines a shader macro.</p>
    /// </summary>
    /// <remarks>
    /// <p>You can use shader macros in your shaders. The <strong><see cref = "SharpDX.Direct3D.ShaderMacro"/></strong> structure defines a single shader macro as shown in the following example:</p><pre> <see cref = "SharpDX.Direct3D.ShaderMacro"/> Shader_Macros[] = { "zero", "0", <c>null</c>, <c>null</c> };
    /// </pre><p>The following shader or effect creation functions take an array of shader macros as an input parameter:</p><ul> <li> <strong>D3D10CompileShader</strong> </li> <li> <strong>D3DX10CreateEffectFromFile</strong> </li> <li> <strong>D3DX10PreprocessShaderFromFile</strong> </li> <li> <strong>D3DX11CreateAsyncShaderPreprocessProcessor</strong> </li> </ul>
    /// </remarks>
    /// <doc-id>ff728732</doc-id>
    /// <unmanaged>D3D_SHADER_MACRO</unmanaged>
    /// <unmanaged-short>D3D_SHADER_MACRO</unmanaged-short>
    public partial struct ShaderMacro
    {
        /// <summary>
        /// <dd> <p>The macro name.</p> </dd>
        /// </summary>
        /// <doc-id>ff728732</doc-id>
        /// <unmanaged>Name</unmanaged>
        /// <unmanaged-short>Name</unmanaged-short>
        public System.String Name;
        /// <summary>
        /// <dd> <p>The macro definition.</p> </dd>
        /// </summary>
        /// <doc-id>ff728732</doc-id>
        /// <unmanaged>Definition</unmanaged>
        /// <unmanaged-short>Definition</unmanaged-short>
        public System.String Definition;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.IntPtr Name;
            public System.IntPtr Definition;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.Name);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(@ref.Definition);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Name = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(@ref.Name);
            Definition = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(@ref.Definition);
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(Name);
            @ref.Definition = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(Definition);
        }
    }
}