// <auto-generated/>

namespace SharpDX.D3DCompiler
{
    [System.Runtime.InteropServices.GuidAttribute("EB62D63D-93DD-4318-8AE8-C6F83AD371B8")]
    public partial class ConstantBuffer : SharpDX.CppObject
    {
        public ConstantBuffer(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ConstantBuffer(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ConstantBuffer(nativePtr);
        /// <summary>
        /// <p>Get a constant-buffer description.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476592</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.ConstantBufferDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Get a constant-buffer description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ConstantBufferDescription"/></strong>, which represents a shader-buffer description.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476592</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionConstantBuffer::GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.ConstantBufferDescription descRef)
        {
            SharpDX.D3DCompiler.ConstantBufferDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ConstantBufferDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ConstantBufferDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[0]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a shader-reflection variable by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a shader-reflection variable interface (see <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong>).</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476593</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(System.Int32 index)
        {
            SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[1]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionVariable(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a shader-reflection variable by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>Variable name.</p> </dd></param>
        /// <returns><p>Returns a sentinel object (end of list marker). To determine if GetVariableByName successfully completed, call <strong>ID3D11ShaderReflectionVariable::GetDesc</strong> and check the returned <strong><see cref = "SharpDX.Result"/></strong>; any return value other than success means that GetVariableByName failed.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476594</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetVariableByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[2]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("54133220-1CE8-43D3-8236-9855C5CEECFF")]
    public partial class FunctionLinkingGraph : SharpDX.ComObject
    {
        public FunctionLinkingGraph(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FunctionLinkingGraph(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FunctionLinkingGraph(nativePtr);
        /// <summary>
        /// <p>Gets the error from the last function call of the function-linking-graph.</p>
        /// </summary>
        /// <doc-id>dn280539</doc-id>
        /// <unmanaged>GetLastError</unmanaged>
        /// <unmanaged-short>GetLastError</unmanaged-short>
        public SharpDX.Direct3D.Blob LastError
        {
            get
            {
                GetLastError(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Initializes a shader module from the function-linking-graph object.</p>
        /// </summary>
        /// <param name = "moduleInstanceOut"><dd>  <p>The address of a reference to an <strong><see cref = "SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the shader module to initialize.</p> </dd></param>
        /// <param name = "errorBufferOut"><dd>  <p>An optional reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access compiler error messages, or <strong><c>null</c></strong> if there are no errors.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280537</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::CreateModuleInstance([Out] ID3D11ModuleInstance** ppModuleInstance,[Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::CreateModuleInstance</unmanaged-short>
        internal unsafe SharpDX.Result CreateModuleInstance(out SharpDX.D3DCompiler.ModuleInstance moduleInstanceOut, out SharpDX.Direct3D.Blob errorBufferOut)
        {
            System.IntPtr moduleInstanceOut_ = System.IntPtr.Zero;
            System.IntPtr errorBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &moduleInstanceOut_, &errorBufferOut_, (*(void ***)this._nativePointer)[3]);
            if (moduleInstanceOut_ != System.IntPtr.Zero)
                moduleInstanceOut = new SharpDX.D3DCompiler.ModuleInstance(moduleInstanceOut_);
            else
                moduleInstanceOut = null;
            if (errorBufferOut_ != System.IntPtr.Zero)
                errorBufferOut = new SharpDX.Direct3D.Blob(errorBufferOut_);
            else
                errorBufferOut = null;
            return __result__;
        }

        /// <summary>
        /// <p>Sets the input signature of the function-linking-graph.</p>
        /// </summary>
        /// <param name = "inputParametersRef"><dd>  <p>An array of  <strong><see cref = "SharpDX.D3DCompiler.ParameterDescription"/></strong> structures for the parameters of the input signature.</p> </dd></param>
        /// <param name = "cInputParameters"><dd>  <p>The number of input parameters in the <em>pInputParameters</em> array.</p> </dd></param>
        /// <param name = "inputNodeOut"><dd>  <p>A reference to a variable that receives a reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the input signature of the function-linking-graph.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280542</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::SetInputSignature([In, Buffer] const D3D11_PARAMETER_DESC* pInputParameters,[In] unsigned int cInputParameters,[Out] ID3D11LinkingNode** ppInputNode)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::SetInputSignature</unmanaged-short>
        internal unsafe void SetInputSignature(SharpDX.D3DCompiler.ParameterDescription[] inputParametersRef, System.Int32 cInputParameters, out SharpDX.D3DCompiler.LinkingNode inputNodeOut)
        {
            SharpDX.D3DCompiler.ParameterDescription.__Native[] inputParametersRef_ = new SharpDX.D3DCompiler.ParameterDescription.__Native[inputParametersRef.Length];
            System.IntPtr inputNodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            for (int i = 0; i < inputParametersRef.Length; ++i)
                inputParametersRef[i].__MarshalTo(ref (inputParametersRef_)[i]);
            fixed (void *_inputParametersRef = inputParametersRef_)
                __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, _inputParametersRef, cInputParameters, &inputNodeOut_, (*(void ***)this._nativePointer)[4]);
            if (inputNodeOut_ != System.IntPtr.Zero)
                inputNodeOut = new SharpDX.D3DCompiler.LinkingNode(inputNodeOut_);
            else
                inputNodeOut = null;
            for (int i = 0; i < inputParametersRef.Length; ++i)
                inputParametersRef[i].__MarshalFree(ref (inputParametersRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Sets the output signature of the function-linking-graph.</p>
        /// </summary>
        /// <param name = "outputParametersRef"><dd>  <p>An array of  <strong><see cref = "SharpDX.D3DCompiler.ParameterDescription"/></strong> structures for the parameters of the output signature.</p> </dd></param>
        /// <param name = "cOutputParameters"><dd>  <p>The number of output parameters in the <em>pOutputParameters</em> array.</p> </dd></param>
        /// <param name = "outputNodeOut"><dd>  <p>A reference to a variable that receives a reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the output signature of the function-linking-graph.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280543</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::SetOutputSignature([In, Buffer] const D3D11_PARAMETER_DESC* pOutputParameters,[In] unsigned int cOutputParameters,[Out] ID3D11LinkingNode** ppOutputNode)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::SetOutputSignature</unmanaged-short>
        public unsafe void SetOutputSignature(SharpDX.D3DCompiler.ParameterDescription[] outputParametersRef, System.Int32 cOutputParameters, out SharpDX.D3DCompiler.LinkingNode outputNodeOut)
        {
            SharpDX.D3DCompiler.ParameterDescription.__Native[] outputParametersRef_ = new SharpDX.D3DCompiler.ParameterDescription.__Native[outputParametersRef.Length];
            System.IntPtr outputNodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            for (int i = 0; i < outputParametersRef.Length; ++i)
                outputParametersRef[i].__MarshalTo(ref (outputParametersRef_)[i]);
            fixed (void *_outputParametersRef = outputParametersRef_)
                __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, _outputParametersRef, cOutputParameters, &outputNodeOut_, (*(void ***)this._nativePointer)[5]);
            if (outputNodeOut_ != System.IntPtr.Zero)
                outputNodeOut = new SharpDX.D3DCompiler.LinkingNode(outputNodeOut_);
            else
                outputNodeOut = null;
            for (int i = 0; i < outputParametersRef.Length; ++i)
                outputParametersRef[i].__MarshalFree(ref (outputParametersRef_)[i]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Creates a call-function linking node to use in the function-linking-graph.</p>
        /// </summary>
        /// <param name = "moduleInstanceNamespaceRef"><dd>  <p> The optional namespace for the function, or <strong><c>null</c></strong> if no namespace is needed. </p> </dd></param>
        /// <param name = "moduleWithFunctionPrototypeRef"><dd>  <p> A reference to the <strong><see cref = "SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the library module that contains the function prototype. </p> </dd></param>
        /// <param name = "functionNameRef"><dd>  <p>The name of the function.</p> </dd></param>
        /// <returns><dd>  <p> A reference to a variable that receives a reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the function in the function-linking-graph. </p> </dd></returns>
        /// <doc-id>dn280536</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::CallFunction([In, Optional] const char* pModuleInstanceNamespace,[In] ID3D11Module* pModuleWithFunctionPrototype,[In] const char* pFunctionName,[Out] ID3D11LinkingNode** ppCallNode)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::CallFunction</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.LinkingNode CallFunction(System.String moduleInstanceNamespaceRef, SharpDX.D3DCompiler.Module moduleWithFunctionPrototypeRef, System.String functionNameRef)
        {
            System.IntPtr moduleInstanceNamespaceRef_;
            System.IntPtr moduleWithFunctionPrototypeRef_ = System.IntPtr.Zero;
            System.IntPtr functionNameRef_;
            SharpDX.D3DCompiler.LinkingNode callNodeOut;
            System.IntPtr callNodeOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            moduleInstanceNamespaceRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(moduleInstanceNamespaceRef);
            moduleWithFunctionPrototypeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.Module>(moduleWithFunctionPrototypeRef);
            functionNameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(functionNameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)moduleInstanceNamespaceRef_, (void *)moduleWithFunctionPrototypeRef_, (void *)functionNameRef_, &callNodeOut_, (*(void ***)this._nativePointer)[6]);
            if (callNodeOut_ != System.IntPtr.Zero)
                callNodeOut = new SharpDX.D3DCompiler.LinkingNode(callNodeOut_);
            else
                callNodeOut = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(moduleInstanceNamespaceRef_);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(functionNameRef_);
            __result__.CheckError();
            return callNodeOut;
        }

        /// <summary>
        /// <p>Passes a value from a source linking node to a destination linking node.</p>
        /// </summary>
        /// <param name = "srcNodeRef"><dd>  <p>A reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the source linking node.</p> </dd></param>
        /// <param name = "srcParameterIndex"><dd>  <p>The zero-based index of the source parameter.</p> </dd></param>
        /// <param name = "dstNodeRef"><dd>  <p>A reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the destination linking node.</p> </dd></param>
        /// <param name = "dstParameterIndex"><dd>  <p>The zero-based index of the destination parameter.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280540</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::PassValue([In] ID3D11LinkingNode* pSrcNode,[In] int SrcParameterIndex,[In] ID3D11LinkingNode* pDstNode,[In] int DstParameterIndex)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::PassValue</unmanaged-short>
        public unsafe void PassValue(SharpDX.D3DCompiler.LinkingNode srcNodeRef, System.Int32 srcParameterIndex, SharpDX.D3DCompiler.LinkingNode dstNodeRef, System.Int32 dstParameterIndex)
        {
            System.IntPtr srcNodeRef_ = System.IntPtr.Zero;
            System.IntPtr dstNodeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            srcNodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.LinkingNode>(srcNodeRef);
            dstNodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.LinkingNode>(dstNodeRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)srcNodeRef_, srcParameterIndex, (void *)dstNodeRef_, dstParameterIndex, (*(void ***)this._nativePointer)[7]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Passes a value with swizzle from a source linking node to a destination linking node.</p>
        /// </summary>
        /// <param name = "srcNodeRef"><dd>  <p>A reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the source linking node.</p> </dd></param>
        /// <param name = "srcParameterIndex"><dd>  <p>The zero-based index of the source parameter.</p> </dd></param>
        /// <param name = "srcSwizzleRef"><dd>  <p>The name of the source swizzle.</p> </dd></param>
        /// <param name = "dstNodeRef"><dd>  <p>A reference to the <strong><see cref = "SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the destination linking node.</p> </dd></param>
        /// <param name = "dstParameterIndex"><dd>  <p>The zero-based index of the destination parameter.</p> </dd></param>
        /// <param name = "dstSwizzleRef"><dd>  <p>The name of the destination swizzle.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280541</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::PassValueWithSwizzle([In] ID3D11LinkingNode* pSrcNode,[In] int SrcParameterIndex,[In] const char* pSrcSwizzle,[In] ID3D11LinkingNode* pDstNode,[In] int DstParameterIndex,[In] const char* pDstSwizzle)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::PassValueWithSwizzle</unmanaged-short>
        public unsafe void PassValueWithSwizzle(SharpDX.D3DCompiler.LinkingNode srcNodeRef, System.Int32 srcParameterIndex, System.String srcSwizzleRef, SharpDX.D3DCompiler.LinkingNode dstNodeRef, System.Int32 dstParameterIndex, System.String dstSwizzleRef)
        {
            System.IntPtr srcNodeRef_ = System.IntPtr.Zero;
            System.IntPtr srcSwizzleRef_;
            System.IntPtr dstNodeRef_ = System.IntPtr.Zero;
            System.IntPtr dstSwizzleRef_;
            SharpDX.Result __result__;
            srcNodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.LinkingNode>(srcNodeRef);
            srcSwizzleRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(srcSwizzleRef);
            dstNodeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.LinkingNode>(dstNodeRef);
            dstSwizzleRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(dstSwizzleRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)srcNodeRef_, srcParameterIndex, (void *)srcSwizzleRef_, (void *)dstNodeRef_, dstParameterIndex, (void *)dstSwizzleRef_, (*(void ***)this._nativePointer)[8]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(srcSwizzleRef_);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(dstSwizzleRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the error from the last function call of the function-linking-graph.</p>
        /// </summary>
        /// <param name = "errorBufferOut"><dd>  <p> An reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the error. </p> </dd></param>
        /// <returns><p> Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes. </p></returns>
        /// <doc-id>dn280539</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::GetLastError([Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::GetLastError</unmanaged-short>
        internal unsafe void GetLastError(out SharpDX.Direct3D.Blob errorBufferOut)
        {
            System.IntPtr errorBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &errorBufferOut_, (*(void ***)this._nativePointer)[9]);
            if (errorBufferOut_ != System.IntPtr.Zero)
                errorBufferOut = new SharpDX.Direct3D.Blob(errorBufferOut_);
            else
                errorBufferOut = null;
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Generates Microsoft High Level Shader Language (HLSL) shader code that represents the function-linking-graph.</p>
        /// </summary>
        /// <param name = "uFlags"><dd>  <p>Reserved</p> </dd></param>
        /// <param name = "bufferOut"><dd>  <p>An reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the HLSL shader source code that represents the function-linking-graph. You can compile this HLSL code, but first you must  add code or include statements for the functions called in the function-linking-graph.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280538</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::GenerateHlsl([In] unsigned int uFlags,[Out] ID3D10Blob** ppBuffer)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::GenerateHlsl</unmanaged-short>
        public unsafe void GenerateHlsl(System.Int32 uFlags, out SharpDX.Direct3D.Blob bufferOut)
        {
            System.IntPtr bufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uFlags, &bufferOut_, (*(void ***)this._nativePointer)[10]);
            if (bufferOut_ != System.IntPtr.Zero)
                bufferOut = new SharpDX.Direct3D.Blob(bufferOut_);
            else
                bufferOut = null;
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("42757488-334F-47FE-982E-1A65D08CC462")]
    public partial class FunctionParameterReflection : SharpDX.CppObject
    {
        public FunctionParameterReflection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FunctionParameterReflection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FunctionParameterReflection(nativePtr);
        /// <summary>
        /// <p>Fills the parameter descriptor structure for the function's parameter.</p>
        /// </summary>
        /// <doc-id>dn280545</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.ParameterDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Fills the parameter descriptor structure for the function's parameter.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ParameterDescription"/></strong> structure that receives a description of the function's parameter. </p> </dd></param>
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280545</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionParameterReflection::GetDesc([Out] D3D11_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionParameterReflection::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.ParameterDescription descRef)
        {
            SharpDX.D3DCompiler.ParameterDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ParameterDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[0]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("207BCECB-D683-4A06-A8A3-9B149B9F73A4")]
    public partial class FunctionReflection : SharpDX.CppObject
    {
        public FunctionReflection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator FunctionReflection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new FunctionReflection(nativePtr);
        /// <summary>
        /// <p>Fills the function descriptor structure for the function.</p>
        /// </summary>
        /// <doc-id>dn280549</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.FunctionDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Fills the function descriptor structure for the function.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.FunctionDescription"/></strong> structure that receives a description of the function.</p> </dd></param>
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280549</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetDesc([Out] D3D11_FUNCTION_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.FunctionDescription descRef)
        {
            SharpDX.D3DCompiler.FunctionDescription.__Native descRef_ = default (SharpDX.D3DCompiler.FunctionDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.FunctionDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[0]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a constant buffer by index for a function.</p>
        /// </summary>
        /// <param name = "bufferIndex"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ConstantBuffer"/></strong> interface that represents the constant buffer.</p></returns>
        /// <remarks>
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p>
        /// </remarks>
        /// <doc-id>dn280547</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11FunctionReflection::GetConstantBufferByIndex([In] unsigned int BufferIndex)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetConstantBufferByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ConstantBuffer GetConstantBufferByIndex(System.Int32 bufferIndex)
        {
            SharpDX.D3DCompiler.ConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, bufferIndex, (*(void ***)this._nativePointer)[1]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets a constant buffer by name for a function.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The constant-buffer name.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ConstantBuffer"/></strong> interface that represents the constant buffer.</p></returns>
        /// <remarks>
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p>
        /// </remarks>
        /// <doc-id>dn280548</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11FunctionReflection::GetConstantBufferByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetConstantBufferByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ConstantBuffer GetConstantBufferByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[2]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ConstantBuffer(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Gets a description of how a resource is bound to a function. </p>
        /// </summary>
        /// <param name = "resourceIndex"><dd>  <p>A zero-based resource index.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure that describes input binding of the resource. </p> </dd></param>
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDesc</strong> gets info about how one resource in the set is bound as an input to the shader. The  <em>ResourceIndex</em> parameter specifies the index for the resource.</p>
        /// </remarks>
        /// <doc-id>dn280551</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetResourceBindingDesc([In] unsigned int ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetResourceBindingDesc</unmanaged-short>
        public unsafe void GetResourceBindingDescription(System.Int32 resourceIndex, out SharpDX.D3DCompiler.InputBindingDescription descRef)
        {
            SharpDX.D3DCompiler.InputBindingDescription.__Native descRef_ = default (SharpDX.D3DCompiler.InputBindingDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.InputBindingDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, resourceIndex, &descRef_, (*(void ***)this._nativePointer)[3]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets a variable by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>A reference to a string containing the variable name.</p> </dd></param>
        /// <returns><p> Returns a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> interface. </p></returns>
        /// <doc-id>dn280553</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11FunctionReflection::GetVariableByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetVariableByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionVariable GetVariableByName(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Gets a description of how a resource is bound to a function. </p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The constant-buffer name of the resource.</p> </dd></param>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure that describes input binding of the resource. </p> </dd></param>
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDescByName</strong> gets info about how one resource in the set is bound as an input to the shader. The  <em>Name</em> parameter specifies the name of the resource.</p>
        /// </remarks>
        /// <doc-id>dn280552</doc-id>
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetResourceBindingDescByName</unmanaged-short>
        public unsafe void GetResourceBindingDescByName(System.String name, out SharpDX.D3DCompiler.InputBindingDescription descRef)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.InputBindingDescription.__Native descRef_ = default (SharpDX.D3DCompiler.InputBindingDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.InputBindingDescription);
            SharpDX.Result __result__;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, &descRef_, (*(void ***)this._nativePointer)[5]);
            descRef.__MarshalFrom(ref descRef_);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the function parameter reflector.</p>
        /// </summary>
        /// <param name = "parameterIndex"><dd>  <p>The zero-based index of the function parameter reflector to retrieve.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.FunctionParameterReflection"/></strong> interface that represents the function parameter reflector.</p></returns>
        /// <doc-id>dn280550</doc-id>
        /// <unmanaged>ID3D11FunctionParameterReflection* ID3D11FunctionReflection::GetFunctionParameter([In] int ParameterIndex)</unmanaged>
        /// <unmanaged-short>ID3D11FunctionReflection::GetFunctionParameter</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.FunctionParameterReflection GetFunctionParameter(System.Int32 parameterIndex)
        {
            SharpDX.D3DCompiler.FunctionParameterReflection __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, parameterIndex, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.FunctionParameterReflection(__result__native);
            else
                __result__ = null;
            return __result__;
        }
    }

    public partial interface Include : SharpDX.ICallbackable
    {
    }

    [System.Runtime.InteropServices.GuidAttribute("54384F1B-5B3E-4BB7-AE01-60BA3097CBB6")]
    public partial class LibraryReflection : SharpDX.ComObject
    {
        public LibraryReflection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LibraryReflection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LibraryReflection(nativePtr);
        /// <summary>
        /// <p>Fills the library descriptor structure for the library reflection.</p>
        /// </summary>
        /// <doc-id>dn280556</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.LibraryDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Fills the library descriptor structure for the library reflection.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.LibraryDescription"/></strong> structure that receives a description of the library reflection.</p> </dd></param>
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280556</doc-id>
        /// <unmanaged>HRESULT ID3D11LibraryReflection::GetDesc([Out] D3D11_LIBRARY_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11LibraryReflection::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.LibraryDescription descRef)
        {
            SharpDX.D3DCompiler.LibraryDescription.__Native descRef_ = default (SharpDX.D3DCompiler.LibraryDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.LibraryDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[3]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Gets the function reflector.</p>
        /// </summary>
        /// <param name = "functionIndex"><dd>  <p>The zero-based index of the function reflector to retrieve.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.FunctionReflection"/></strong> interface that represents the function reflector.</p></returns>
        /// <doc-id>dn280557</doc-id>
        /// <unmanaged>ID3D11FunctionReflection* ID3D11LibraryReflection::GetFunctionByIndex([In] int FunctionIndex)</unmanaged>
        /// <unmanaged-short>ID3D11LibraryReflection::GetFunctionByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.FunctionReflection GetFunctionByIndex(System.Int32 functionIndex)
        {
            SharpDX.D3DCompiler.FunctionReflection __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, functionIndex, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.FunctionReflection(__result__native);
            else
                __result__ = null;
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E")]
    public partial class Linker : SharpDX.ComObject
    {
        public Linker(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Linker(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Linker(nativePtr);
        /// <summary>
        /// <p> Links the shader and produces a shader blob that the Direct3D runtime can use. </p>
        /// </summary>
        /// <param name = "entryRef"><dd>  <p> A reference to the <strong><see cref = "SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the shader module instance to link from. </p> </dd></param>
        /// <param name = "entryNameRef"><dd>  <p> The name of the shader module instance to link from. </p> </dd></param>
        /// <param name = "targetNameRef"><dd>  <p> The name for the shader blob that is produced. </p> </dd></param>
        /// <param name = "uFlags"><dd>  <p> Reserved. </p> </dd></param>
        /// <param name = "shaderBlobOut"><dd>  <p> A reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the compiled shader code. </p> </dd></param>
        /// <param name = "errorBufferOut"><dd>  <p> A reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access compiler error messages. </p> </dd></param>
        /// <returns><p> Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes. </p></returns>
        /// <doc-id>dn280560</doc-id>
        /// <unmanaged>HRESULT ID3D11Linker::Link([In] ID3D11ModuleInstance* pEntry,[In] const char* pEntryName,[In] const char* pTargetName,[In] unsigned int uFlags,[Out] ID3D10Blob** ppShaderBlob,[Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>
        /// <unmanaged-short>ID3D11Linker::Link</unmanaged-short>
        internal unsafe SharpDX.Result Link(SharpDX.D3DCompiler.ModuleInstance entryRef, System.String entryNameRef, System.String targetNameRef, System.Int32 uFlags, out SharpDX.Direct3D.Blob shaderBlobOut, out SharpDX.Direct3D.Blob errorBufferOut)
        {
            System.IntPtr entryRef_ = System.IntPtr.Zero;
            System.IntPtr entryNameRef_;
            System.IntPtr targetNameRef_;
            System.IntPtr shaderBlobOut_ = System.IntPtr.Zero;
            System.IntPtr errorBufferOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            entryRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.ModuleInstance>(entryRef);
            entryNameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(entryNameRef);
            targetNameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(targetNameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)entryRef_, (void *)entryNameRef_, (void *)targetNameRef_, uFlags, &shaderBlobOut_, &errorBufferOut_, (*(void ***)this._nativePointer)[3]);
            if (shaderBlobOut_ != System.IntPtr.Zero)
                shaderBlobOut = new SharpDX.Direct3D.Blob(shaderBlobOut_);
            else
                shaderBlobOut = null;
            if (errorBufferOut_ != System.IntPtr.Zero)
                errorBufferOut = new SharpDX.Direct3D.Blob(errorBufferOut_);
            else
                errorBufferOut = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(entryNameRef_);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(targetNameRef_);
            return __result__;
        }

        /// <summary>
        /// <p>Adds an instance of a library module to be used for linking.</p>
        /// </summary>
        /// <param name = "libraryMIRef"><dd>  <p>A reference to the <strong><see cref = "SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the library module instance.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280561</doc-id>
        /// <unmanaged>HRESULT ID3D11Linker::UseLibrary([In] ID3D11ModuleInstance* pLibraryMI)</unmanaged>
        /// <unmanaged-short>ID3D11Linker::UseLibrary</unmanaged-short>
        public unsafe void UseLibrary(SharpDX.D3DCompiler.ModuleInstance libraryMIRef)
        {
            System.IntPtr libraryMIRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            libraryMIRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.ModuleInstance>(libraryMIRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)libraryMIRef_, (*(void ***)this._nativePointer)[4]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Adds a clip plane with the plane coefficients taken from a cbuffer entry for 10Level9 shaders.</p>
        /// </summary>
        /// <param name = "uCBufferSlot">No documentation.</param>
        /// <param name = "uCBufferEntry">No documentation.</param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280559</doc-id>
        /// <unmanaged>HRESULT ID3D11Linker::AddClipPlaneFromCBuffer([In] unsigned int uCBufferSlot,[In] unsigned int uCBufferEntry)</unmanaged>
        /// <unmanaged-short>ID3D11Linker::AddClipPlaneFromCBuffer</unmanaged-short>
        public unsafe void AddClipPlaneFromCBuffer(System.Int32 uCBufferSlot, System.Int32 uCBufferEntry)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uCBufferSlot, uCBufferEntry, (*(void ***)this._nativePointer)[5]);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("D80DD70C-8D2F-4751-94A1-03C79B3556DB")]
    public partial class LinkingNode : SharpDX.ComObject
    {
        public LinkingNode(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator LinkingNode(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new LinkingNode(nativePtr);
    }

    [System.Runtime.InteropServices.GuidAttribute("CAC701EE-80FC-4122-8242-10B39C8CEC34")]
    public partial class Module : SharpDX.ComObject
    {
        public Module(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator Module(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new Module(nativePtr);
        /// <summary>
        /// <p>Initializes an instance of a shader module that is used for resource rebinding.</p>
        /// </summary>
        /// <param name = "namespaceRef"><dd>  <p>The name of a shader module to initialize. This can be <strong><c>null</c></strong> if you don't want to specify a name for the module.</p> </dd></param>
        /// <param name = "moduleInstanceOut"><dd>  <p>The address of a reference to an <strong><see cref = "SharpDX.D3DCompiler.ModuleInstance"/></strong> interface to initialize.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>
        /// <doc-id>dn280608</doc-id>
        /// <unmanaged>HRESULT ID3D11Module::CreateInstance([In, Optional] const char* pNamespace,[Out, Fast] ID3D11ModuleInstance** ppModuleInstance)</unmanaged>
        /// <unmanaged-short>ID3D11Module::CreateInstance</unmanaged-short>
        internal unsafe void CreateInstance(System.String namespaceRef, SharpDX.D3DCompiler.ModuleInstance moduleInstanceOut)
        {
            System.IntPtr namespaceRef_;
            System.IntPtr moduleInstanceOut_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            namespaceRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(namespaceRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)namespaceRef_, &moduleInstanceOut_, (*(void ***)this._nativePointer)[3]);
            (moduleInstanceOut).NativePointer = moduleInstanceOut_;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(namespaceRef_);
            __result__.CheckError();
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("469E07F7-045A-48D5-AA12-68A478CDF75D")]
    public partial class ModuleInstance : SharpDX.ComObject
    {
        public ModuleInstance(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ModuleInstance(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ModuleInstance(nativePtr);
        /// <summary>
        /// <p>Rebinds a constant buffer from a source slot to a destination slot.</p>
        /// </summary>
        /// <param name = "uSrcSlot"><dd>  <p>The source slot number for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The destination slot number for rebinding.</p> </dd></param>
        /// <param name = "cbDstOffset"><dd>  <p>The offset in bytes of the destination slot for rebinding. The offset must have 16-byte alignment.</p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding </li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data </li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds </li> <li> Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280565</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindConstantBuffer([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int cbDstOffset)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindConstantBuffer</unmanaged-short>
        public unsafe SharpDX.Result BindConstantBuffer(System.Int32 uSrcSlot, System.Int32 uDstSlot, System.Int32 cbDstOffset)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uSrcSlot, uDstSlot, cbDstOffset, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a constant buffer by name to a destination slot.</p>
        /// </summary>
        /// <param name = "nameRef"><dd>  <p>The name of the constant buffer for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The destination slot number for rebinding.</p> </dd></param>
        /// <param name = "cbDstOffset"><dd>  <p>The offset in bytes of the destination slot for rebinding. The offset must have 16-byte alignment.</p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding </li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data </li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds </li> <li> Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280566</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindConstantBufferByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int cbDstOffset)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindConstantBufferByName</unmanaged-short>
        public unsafe SharpDX.Result BindConstantBufferByName(System.String nameRef, System.Int32 uDstSlot, System.Int32 cbDstOffset)
        {
            System.IntPtr nameRef_;
            SharpDX.Result __result__;
            nameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(nameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nameRef_, uDstSlot, cbDstOffset, (*(void ***)this._nativePointer)[4]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(nameRef_);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a texture or buffer from source slot to destination slot.</p>
        /// </summary>
        /// <param name = "uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280567</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResource([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindResource</unmanaged-short>
        public unsafe SharpDX.Result BindResource(System.Int32 uSrcSlot, System.Int32 uDstSlot, System.Int32 uCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uSrcSlot, uDstSlot, uCount, (*(void ***)this._nativePointer)[5]);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a texture or buffer by name to destination slots.</p>
        /// </summary>
        /// <param name = "nameRef"><dd>  <p>The name of the texture or buffer for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280570</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceByName</unmanaged-short>
        public unsafe SharpDX.Result BindResourceByName(System.String nameRef, System.Int32 uDstSlot, System.Int32 uCount)
        {
            System.IntPtr nameRef_;
            SharpDX.Result __result__;
            nameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(nameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nameRef_, uDstSlot, uCount, (*(void ***)this._nativePointer)[6]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(nameRef_);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a sampler from source slot to destination slot.</p>
        /// </summary>
        /// <param name = "uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280571</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindSampler([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindSampler</unmanaged-short>
        public unsafe SharpDX.Result BindSampler(System.Int32 uSrcSlot, System.Int32 uDstSlot, System.Int32 uCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uSrcSlot, uDstSlot, uCount, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a sampler by name to destination slots.</p>
        /// </summary>
        /// <param name = "nameRef"><dd>  <p>The name of the sampler for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280605</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindSamplerByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindSamplerByName</unmanaged-short>
        public unsafe SharpDX.Result BindSamplerByName(System.String nameRef, System.Int32 uDstSlot, System.Int32 uCount)
        {
            System.IntPtr nameRef_;
            SharpDX.Result __result__;
            nameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(nameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nameRef_, uDstSlot, uCount, (*(void ***)this._nativePointer)[8]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(nameRef_);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds an unordered access view (UAV) from source slot to destination slot.</p>
        /// </summary>
        /// <param name = "uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280606</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindUnorderedAccessView([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindUnorderedAccessView</unmanaged-short>
        public unsafe SharpDX.Result BindUnorderedAccessView(System.Int32 uSrcSlot, System.Int32 uDstSlot, System.Int32 uCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uSrcSlot, uDstSlot, uCount, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds an unordered access view (UAV) by name to destination slots.</p>
        /// </summary>
        /// <param name = "nameRef"><dd>  <p>The name of the UAV for rebinding.</p> </dd></param>
        /// <param name = "uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280607</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindUnorderedAccessViewByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindUnorderedAccessViewByName</unmanaged-short>
        public unsafe SharpDX.Result BindUnorderedAccessViewByName(System.String nameRef, System.Int32 uDstSlot, System.Int32 uCount)
        {
            System.IntPtr nameRef_;
            SharpDX.Result __result__;
            nameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(nameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)nameRef_, uDstSlot, uCount, (*(void ***)this._nativePointer)[10]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(nameRef_);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a resource as an unordered access view (UAV) from source slot to destination slot.</p>
        /// </summary>
        /// <param name = "uSrcSrvSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>
        /// <param name = "uDstUavSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280568</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceAsUnorderedAccessView([In] unsigned int uSrcSrvSlot,[In] unsigned int uDstUavSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceAsUnorderedAccessView</unmanaged-short>
        public unsafe SharpDX.Result BindResourceAsUnorderedAccessView(System.Int32 uSrcSrvSlot, System.Int32 uDstUavSlot, System.Int32 uCount)
        {
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uSrcSrvSlot, uDstUavSlot, uCount, (*(void ***)this._nativePointer)[11]);
            return __result__;
        }

        /// <summary>
        /// <p>Rebinds a resource by name as an unordered access view (UAV) to destination slots.</p>
        /// </summary>
        /// <param name = "srvNameRef"><dd>  <p>The name of the resource for rebinding.</p> </dd></param>
        /// <param name = "uDstUavSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>
        /// <param name = "uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>
        /// <returns><p>Returns:</p><ul> <li><strong><see cref = "SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>
        /// <doc-id>dn280569</doc-id>
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceAsUnorderedAccessViewByName([In] const char* pSrvName,[In] unsigned int uDstUavSlot,[In] unsigned int uCount)</unmanaged>
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceAsUnorderedAccessViewByName</unmanaged-short>
        public unsafe SharpDX.Result BindResourceAsUnorderedAccessViewByName(System.String srvNameRef, System.Int32 uDstUavSlot, System.Int32 uCount)
        {
            System.IntPtr srvNameRef_;
            SharpDX.Result __result__;
            srvNameRef_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(srvNameRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)srvNameRef_, uDstUavSlot, uCount, (*(void ***)this._nativePointer)[12]);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(srvNameRef_);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("8d536ca1-0cca-4956-a837-786963755584")]
    public partial class ShaderReflection : SharpDX.ComObject
    {
        public ShaderReflection(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ShaderReflection(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ShaderReflection(nativePtr);
        /// <summary>
        /// <p>Get a shader description.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476615</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the number of Mov instructions.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476620</doc-id>
        /// <unmanaged>GetMovInstructionCount</unmanaged>
        /// <unmanaged-short>GetMovInstructionCount</unmanaged-short>
        public System.Int32 MoveInstructionCount
        {
            get => GetMoveInstructionCount();
        }

        /// <summary>
        /// <p>Gets the number of Movc instructions.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476619</doc-id>
        /// <unmanaged>GetMovcInstructionCount</unmanaged>
        /// <unmanaged-short>GetMovcInstructionCount</unmanaged-short>
        public System.Int32 ConditionalMoveInstructionCount
        {
            get => GetConditionalMoveInstructionCount();
        }

        /// <summary>
        /// <p>Gets the number of conversion instructions.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476614</doc-id>
        /// <unmanaged>GetConversionInstructionCount</unmanaged>
        /// <unmanaged-short>GetConversionInstructionCount</unmanaged-short>
        public System.Int32 ConversionInstructionCount
        {
            get => GetConversionInstructionCount();
        }

        /// <summary>
        /// <p>Gets the number of bitwise instructions.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476611</doc-id>
        /// <unmanaged>GetBitwiseInstructionCount</unmanaged>
        /// <unmanaged-short>GetBitwiseInstructionCount</unmanaged-short>
        public System.Int32 BitwiseInstructionCount
        {
            get => GetBitwiseInstructionCount();
        }

        /// <summary>
        /// <p>Gets the geometry-shader input-primitive description.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476616</doc-id>
        /// <unmanaged>GetGSInputPrimitive</unmanaged>
        /// <unmanaged-short>GetGSInputPrimitive</unmanaged-short>
        public SharpDX.D3DCompiler.InputPrimitive GeometryShaderSInputPrimitive
        {
            get => GetGeometryShaderSInputPrimitive();
        }

        /// <summary>
        /// <p>Indicates whether a shader is a sample frequency shader.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476627</doc-id>
        /// <unmanaged>IsSampleFrequencyShader</unmanaged>
        /// <unmanaged-short>IsSampleFrequencyShader</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool IsSampleFrequencyShader
        {
            get => IsSampleFrequencyShader_();
        }

        /// <summary>
        /// <p>Gets the number of interface slots in a shader.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476621</doc-id>
        /// <unmanaged>GetNumInterfaceSlots</unmanaged>
        /// <unmanaged-short>GetNumInterfaceSlots</unmanaged-short>
        public System.Int32 InterfaceSlotCount
        {
            get => GetInterfaceSlotCount();
        }

        /// <summary>
        /// <p>Gets the minimum feature level.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476618</doc-id>
        /// <unmanaged>GetMinFeatureLevel</unmanaged>
        /// <unmanaged-short>GetMinFeatureLevel</unmanaged-short>
        public SharpDX.Direct3D.FeatureLevel MinFeatureLevel
        {
            get
            {
                GetMinFeatureLevel(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets a group of flags that indicates the requirements of a shader.</p>
        /// </summary>
        /// <remarks>
        /// <p>Here is how the D3D11Shader.h header defines the shader requirements flags:</p><pre> #define D3D_SHADER_REQUIRES_DOUBLES                         0x00000001
        /// #define D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL             0x00000002
        /// #define D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE             0x00000004
        /// #define D3D_SHADER_REQUIRES_64_UAVS                         0x00000008
        /// #define D3D_SHADER_REQUIRES_MINIMUM_PRECISION               0x00000010
        /// #define D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS          0x00000020
        /// #define D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS          0x00000040
        /// #define D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING    0x00000080
        /// </pre>
        /// </remarks>
        /// <doc-id>jj542458</doc-id>
        /// <unmanaged>GetRequiresFlags</unmanaged>
        /// <unmanaged-short>GetRequiresFlags</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderRequiresFlags RequiresFlags
        {
            get => GetRequiresFlags();
        }

        /// <summary>
        /// <p>Get a shader description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a shader description. See <strong><see cref = "SharpDX.D3DCompiler.ShaderDescription"/></strong>.</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476615</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.ShaderDescription descRef)
        {
            SharpDX.D3DCompiler.ShaderDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[3]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a constant buffer by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a constant buffer (see <strong><see cref = "SharpDX.D3DCompiler.ConstantBuffer"/> Interface</strong>).</p></returns>
        /// <remarks>
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476612</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetConstantBufferByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ConstantBuffer GetConstantBuffer(System.Int32 index)
        {
            SharpDX.D3DCompiler.ConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[4]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a constant buffer by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The constant-buffer name.</p> </dd></param>
        /// <returns><p>A reference to a constant buffer (see <strong><see cref = "SharpDX.D3DCompiler.ConstantBuffer"/> Interface</strong>).</p></returns>
        /// <remarks>
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476613</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetConstantBufferByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ConstantBuffer GetConstantBuffer(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[5]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ConstantBuffer(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a description of how a resource is bound to a shader.</p>
        /// </summary>
        /// <param name = "resourceIndex"><dd>  <p>A zero-based resource index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to an input-binding description. See <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDesc</strong> gets information about how one resource in the set is bound as an input to the shader. The  <em>ResourceIndex</em> parameter specifies the index for the resource.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476624</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDesc([In] unsigned int ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetResourceBindingDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.InputBindingDescription GetResourceBindingDescription(System.Int32 resourceIndex)
        {
            SharpDX.D3DCompiler.InputBindingDescription descRef;
            SharpDX.D3DCompiler.InputBindingDescription.__Native descRef_ = default (SharpDX.D3DCompiler.InputBindingDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.InputBindingDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, resourceIndex, &descRef_, (*(void ***)this._nativePointer)[6]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Get an input-parameter description for a shader.</p>
        /// </summary>
        /// <param name = "parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>
        /// <returns><dd>  <p> A reference to a shader-input-signature description. See <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>. </p> </dd></returns>
        /// <remarks>
        /// <p>An input-parameter description is also called a shader signature. The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476617</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetInputParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetInputParameterDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderParameterDescription GetInputParameterDescription(System.Int32 parameterIndex)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription descRef;
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, parameterIndex, &descRef_, (*(void ***)this._nativePointer)[7]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Get an output-parameter description for a shader.</p>
        /// </summary>
        /// <param name = "parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to a shader-output-parameter description. See <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476622</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetOutputParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetOutputParameterDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderParameterDescription GetOutputParameterDescription(System.Int32 parameterIndex)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription descRef;
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, parameterIndex, &descRef_, (*(void ***)this._nativePointer)[8]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Get a patch-constant parameter description for a shader.</p>
        /// </summary>
        /// <param name = "parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>
        /// <returns><dd>  <p>A reference to a shader-input-signature description. See <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476623</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetPatchConstantParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetPatchConstantParameterDesc</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderParameterDescription GetPatchConstantParameterDescription(System.Int32 parameterIndex)
        {
            SharpDX.D3DCompiler.ShaderParameterDescription descRef;
            SharpDX.D3DCompiler.ShaderParameterDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderParameterDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderParameterDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, parameterIndex, &descRef_, (*(void ***)this._nativePointer)[9]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Gets a variable by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>A reference to a string containing the variable name.</p> </dd></param>
        /// <returns><p> Returns a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> interface. </p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476626</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflection::GetVariableByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetVariableByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[10]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionVariable(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a description of how a resource is bound to a shader. </p>
        /// </summary>
        /// <param name = "name"><dd>  <p>The constant-buffer name of the resource.</p> </dd></param>
        /// <returns><dd>  <p>A reference to an input-binding description. See <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong>.</p> </dd></returns>
        /// <remarks>
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDescByName</strong> gets information about how one resource in the set is bound as an input to the shader. The  <em>Name</em> parameter specifies the name of the resource.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476625</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetResourceBindingDescByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.InputBindingDescription GetResourceBindingDescription(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.InputBindingDescription descRef;
            SharpDX.D3DCompiler.InputBindingDescription.__Native descRef_ = default (SharpDX.D3DCompiler.InputBindingDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.InputBindingDescription);
            SharpDX.Result __result__;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)name_, &descRef_, (*(void ***)this._nativePointer)[11]);
            descRef.__MarshalFrom(ref descRef_);
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            __result__.CheckError();
            return descRef;
        }

        /// <summary>
        /// <p>Gets the number of Mov instructions.</p>
        /// </summary>
        /// <returns><p>Returns the number of Mov instructions.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476620</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovInstructionCount()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetMovInstructionCount</unmanaged-short>
        internal unsafe System.Int32 GetMoveInstructionCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[12]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the number of Movc instructions.</p>
        /// </summary>
        /// <returns><p>Returns the number of Movc instructions.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476619</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovcInstructionCount()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetMovcInstructionCount</unmanaged-short>
        internal unsafe System.Int32 GetConditionalMoveInstructionCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[13]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the number of conversion instructions.</p>
        /// </summary>
        /// <returns><p>Returns the number of conversion instructions.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476614</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetConversionInstructionCount()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetConversionInstructionCount</unmanaged-short>
        internal unsafe System.Int32 GetConversionInstructionCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[14]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the number of bitwise instructions.</p>
        /// </summary>
        /// <returns><p>The number of bitwise instructions.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476611</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetBitwiseInstructionCount()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetBitwiseInstructionCount</unmanaged-short>
        internal unsafe System.Int32 GetBitwiseInstructionCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[15]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the geometry-shader input-primitive description.</p>
        /// </summary>
        /// <returns><p> The input-primitive description.  See <strong><see cref = "SharpDX.Direct3D.PrimitiveTopology"/></strong>, <strong>D3D11_PRIMITIVE_TOPOLOGY</strong>, or <strong>D3D10_PRIMITIVE_TOPOLOGY</strong>. </p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476616</doc-id>
        /// <unmanaged>D3D_PRIMITIVE ID3D11ShaderReflection::GetGSInputPrimitive()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetGSInputPrimitive</unmanaged-short>
        internal unsafe SharpDX.D3DCompiler.InputPrimitive GetGeometryShaderSInputPrimitive()
        {
            SharpDX.D3DCompiler.InputPrimitive __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSharpDXD3DCompilerInputPrimitive(this._nativePointer, (*(void ***)this._nativePointer)[16]);
            return __result__;
        }

        /// <summary>
        /// <p>Indicates whether a shader is a sample frequency shader.</p>
        /// </summary>
        /// <returns><p>Returns true if the shader is a sample frequency shader; otherwise returns false.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476627</doc-id>
        /// <unmanaged>BOOL ID3D11ShaderReflection::IsSampleFrequencyShader()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::IsSampleFrequencyShader</unmanaged-short>
        internal unsafe SharpDX.Mathematics.Interop.RawBool IsSampleFrequencyShader_()
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSharpDXMathematicsInteropRawBool(this._nativePointer, (*(void ***)this._nativePointer)[17]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the number of interface slots in a shader.</p>
        /// </summary>
        /// <returns><p>The number of interface slots in the shader.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476621</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetNumInterfaceSlots()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetNumInterfaceSlots</unmanaged-short>
        internal unsafe System.Int32 GetInterfaceSlotCount()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[18]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the minimum feature level.</p>
        /// </summary>
        /// <param name = "levelRef"><dd>  <p> A reference to one of the enumerated values in <strong><see cref = "SharpDX.Direct3D.FeatureLevel"/></strong>, which represents the minimum feature level. </p> </dd></param>
        /// <returns><p> Returns one of the following Direct3D 11 Return Codes. </p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476618</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetMinFeatureLevel</unmanaged-short>
        internal unsafe void GetMinFeatureLevel(out SharpDX.Direct3D.FeatureLevel levelRef)
        {
            SharpDX.Result __result__;
            fixed (void *levelRef_ = &levelRef)
                __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, levelRef_, (*(void ***)this._nativePointer)[19]);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</p>
        /// </summary>
        /// <param name = "sizeXRef"><dd>  <p>A reference to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</p> </dd></param>
        /// <param name = "sizeYRef"><dd>  <p>A reference to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</p> </dd></param>
        /// <param name = "sizeZRef"><dd>  <p>A reference to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</p> </dd></param>
        /// <returns><p> Returns the total size, in threads, of the thread-group grid by calculating the product of the size of each dimension.</p><code>*pSizeX * *pSizeY * *pSizeZ;</code></returns>
        /// <remarks>
        /// <p> This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll. </p><p>When a compute shader is written it defines the actions of a single thread group only. If multiple thread groups are required, it is the role of the <strong>ID3D11DeviceContext::Dispatch</strong> call to issue multiple thread groups. </p>
        /// </remarks>
        /// <doc-id>ff728742</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetThreadGroupSize([Out, Optional] unsigned int* pSizeX,[Out, Optional] unsigned int* pSizeY,[Out, Optional] unsigned int* pSizeZ)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetThreadGroupSize</unmanaged-short>
        public unsafe System.Int32 GetThreadGroupSize(out System.Int32 sizeXRef, out System.Int32 sizeYRef, out System.Int32 sizeZRef)
        {
            System.Int32 __result__;
            fixed (void *sizeZRef_ = &sizeZRef)
                fixed (void *sizeYRef_ = &sizeYRef)
                    fixed (void *sizeXRef_ = &sizeXRef)
                        __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, sizeXRef_, sizeYRef_, sizeZRef_, (*(void ***)this._nativePointer)[20]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets a group of flags that indicates the requirements of a shader.</p>
        /// </summary>
        /// <returns><p>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements. </p><table> <tr><th>Shader requirement flag</th><th>Description</th></tr> <tr><td><strong>D3D_SHADER_REQUIRES_DOUBLES</strong></td><td>Shader requires that the graphics driver and hardware support double data type. For more info, see <strong><see cref = "SharpDX.Direct3D11.FeatureDataDoubles"/></strong>.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</strong></td><td>Shader requires an early depth stencil.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</strong></td><td>Shader requires unordered access views (UAVs) at every pipeline stage.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_64_UAVS</strong></td><td>Shader requires 64 UAVs.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</strong></td><td>Shader requires the graphics driver and hardware to support minimum precision. For more info, see Using HLSL minimum precision.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</strong></td><td>Shader requires that the graphics driver and hardware support extended doubles instructions. For more info, see the <strong>ExtendedDoublesShaderInstructions</strong> member of <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong>.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</strong></td><td>Shader requires that the graphics driver and hardware support the <strong>msad4</strong> intrinsic function in shaders. For more info, see the <strong>SAD4ShaderInstructions</strong> member of <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong>.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</strong></td><td>Shader requires that the graphics driver and hardware support Direct3D 9 shadow support. For more info, see <strong><see cref = "SharpDX.Direct3D11.FeatureDataD3D9ShadowSupport"/></strong>.</td></tr> <tr><td><strong>D3D_SHADER_REQUIRES_TILED_RESOURCES</strong></td><td>Shader requires that the graphics driver and hardware support tiled resources. For more info, see <strong>GetResourceTiling</strong>. </td></tr> </table><p>?</p></returns>
        /// <remarks>
        /// <p>Here is how the D3D11Shader.h header defines the shader requirements flags:</p><pre> #define D3D_SHADER_REQUIRES_DOUBLES                         0x00000001
        /// #define D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL             0x00000002
        /// #define D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE             0x00000004
        /// #define D3D_SHADER_REQUIRES_64_UAVS                         0x00000008
        /// #define D3D_SHADER_REQUIRES_MINIMUM_PRECISION               0x00000010
        /// #define D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS          0x00000020
        /// #define D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS          0x00000040
        /// #define D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING    0x00000080
        /// </pre>
        /// </remarks>
        /// <doc-id>jj542458</doc-id>
        /// <unmanaged>unsigned longlong ID3D11ShaderReflection::GetRequiresFlags()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflection::GetRequiresFlags</unmanaged-short>
        internal unsafe SharpDX.D3DCompiler.ShaderRequiresFlags GetRequiresFlags()
        {
            SharpDX.D3DCompiler.ShaderRequiresFlags __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSharpDXD3DCompilerShaderRequiresFlags(this._nativePointer, (*(void ***)this._nativePointer)[21]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("6E6FFA6A-9BAE-4613-A51E-91652D508C21")]
    public partial class ShaderReflectionType : SharpDX.CppObject
    {
        public ShaderReflectionType(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ShaderReflectionType(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ShaderReflectionType(nativePtr);
        /// <summary>
        /// <p>Get the description of a shader-reflection-variable type.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476597</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderTypeDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>Gets the base class of a class.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476603</doc-id>
        /// <unmanaged>GetSubType</unmanaged>
        /// <unmanaged-short>GetSubType</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderReflectionType SubType
        {
            get => GetSubType();
        }

        /// <summary>
        /// <p>Gets an <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> interface containing the variable base class type.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476596</doc-id>
        /// <unmanaged>GetBaseClass</unmanaged>
        /// <unmanaged-short>GetBaseClass</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderReflectionType BaseClass
        {
            get => GetBaseClass();
        }

        /// <summary>
        /// <p>Gets the number of interfaces.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476602</doc-id>
        /// <unmanaged>GetNumInterfaces</unmanaged>
        /// <unmanaged-short>GetNumInterfaces</unmanaged-short>
        public System.Int32 NumInterfaces
        {
            get => GetNumInterfaces();
        }

        /// <summary>
        /// <p>Get the description of a shader-reflection-variable type.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a shader-type description (see <strong><see cref = "SharpDX.D3DCompiler.ShaderTypeDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476597</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.ShaderTypeDescription descRef)
        {
            SharpDX.D3DCompiler.ShaderTypeDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderTypeDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderTypeDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[0]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a shader-reflection-variable type by index.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476599</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByIndex([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionType GetMemberType(System.Int32 index)
        {
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[1]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Get a shader-reflection-variable type by name.</p>
        /// </summary>
        /// <param name = "name"><dd>  <p>Member name.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476600</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByName([In] const char* Name)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeByName</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionType GetMemberType(System.String name)
        {
            System.IntPtr name_;
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            name_ = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(name);
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (void *)name_, (*(void ***)this._nativePointer)[2]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            System.Runtime.InteropServices.Marshal.FreeHGlobal(name_);
            return __result__;
        }

        /// <summary>
        /// <p>Get a shader-reflection-variable type.</p>
        /// </summary>
        /// <param name = "index"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>The variable type.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476601</doc-id>
        /// <unmanaged>const char* ID3D11ShaderReflectionType::GetMemberTypeName([In] unsigned int Index)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeName</unmanaged-short>
        public unsafe System.String GetMemberTypeName(System.Int32 index)
        {
            System.String __result__;
            System.IntPtr __result__native;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, index, (*(void ***)this._nativePointer)[3]);
            __result__ = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(__result__native);
            return __result__;
        }

        /// <summary>
        /// <p>Indicates whether two <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references have the same underlying type.</p>
        /// </summary>
        /// <param name = "typeRef">No documentation.</param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if the references have the same underlying type; otherwise returns S_FALSE.</p></returns>
        /// <remarks>
        /// <p>IsEqual indicates whether the sources of the <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references have the same underlying type. For example, if two <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references were retrieved from variables, IsEqual can be used to see if  the variables have the same type.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476605</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::IsEqual([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::IsEqual</unmanaged-short>
        internal unsafe SharpDX.Result IsEqual_(SharpDX.D3DCompiler.ShaderReflectionType typeRef)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.ShaderReflectionType>(typeRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)typeRef_, (*(void ***)this._nativePointer)[4]);
            return __result__;
        }

        /// <summary>
        /// <p>Gets the base class of a class.</p>
        /// </summary>
        /// <returns><p>Returns a reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> containing the base class type.  Returns <strong><c>null</c></strong> if the class does not have a base class.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476603</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetSubType()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetSubType</unmanaged-short>
        internal unsafe SharpDX.D3DCompiler.ShaderReflectionType GetSubType()
        {
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[5]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets an <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> interface containing the variable base class type.</p>
        /// </summary>
        /// <returns><p>Returns A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476596</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetBaseClass()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetBaseClass</unmanaged-short>
        internal unsafe SharpDX.D3DCompiler.ShaderReflectionType GetBaseClass()
        {
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[6]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets the number of interfaces.</p>
        /// </summary>
        /// <returns><p>Returns the number of interfaces.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476602</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflectionType::GetNumInterfaces()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetNumInterfaces</unmanaged-short>
        internal unsafe System.Int32 GetNumInterfaces()
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (*(void ***)this._nativePointer)[7]);
            return __result__;
        }

        /// <summary>
        /// <p>Get an interface by index.</p>
        /// </summary>
        /// <param name = "uIndex"><dd>  <p>Zero-based index.</p> </dd></param>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476598</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetInterfaceByIndex([In] unsigned int uIndex)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetInterfaceByIndex</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionType GetInterface(System.Int32 uIndex)
        {
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, uIndex, (*(void ***)this._nativePointer)[8]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Indicates whether a variable is of the specified type.</p>
        /// </summary>
        /// <param name = "typeRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if object being queried is equal to or inherits from the type in the <em>pType</em> parameter; otherwise returns S_FALSE.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476606</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::IsOfType([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::IsOfType</unmanaged-short>
        internal unsafe SharpDX.Result IsOfType_(SharpDX.D3DCompiler.ShaderReflectionType typeRef)
        {
            System.IntPtr typeRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            typeRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.ShaderReflectionType>(typeRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)typeRef_, (*(void ***)this._nativePointer)[9]);
            return __result__;
        }

        /// <summary>
        /// <p>Indicates whether a class type implements an interface.</p>
        /// </summary>
        /// <param name = "baseRef"><dd>  <p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p> </dd></param>
        /// <returns><p>Returns <see cref = "SharpDX.Result.Ok"/> if the interface is implemented; otherwise return S_FALSE.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476604</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::ImplementsInterface([In] ID3D11ShaderReflectionType* pBase)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionType::ImplementsInterface</unmanaged-short>
        internal unsafe SharpDX.Result ImplementsInterface_(SharpDX.D3DCompiler.ShaderReflectionType baseRef)
        {
            System.IntPtr baseRef_ = System.IntPtr.Zero;
            SharpDX.Result __result__;
            baseRef_ = SharpDX.CppObject.ToCallbackPtr<SharpDX.D3DCompiler.ShaderReflectionType>(baseRef);
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, (void *)baseRef_, (*(void ***)this._nativePointer)[10]);
            return __result__;
        }
    }

    [System.Runtime.InteropServices.GuidAttribute("51F23923-F3E5-4BD1-91CB-606177D8DB4C")]
    public partial class ShaderReflectionVariable : SharpDX.CppObject
    {
        public ShaderReflectionVariable(System.IntPtr nativePtr): base (nativePtr)
        {
        }

        public static explicit operator ShaderReflectionVariable(System.IntPtr nativePtr) => nativePtr == System.IntPtr.Zero ? null : new ShaderReflectionVariable(nativePtr);
        /// <summary>
        /// <p>Get a shader-variable description.</p>
        /// </summary>
        /// <remarks>
        /// <p>This method can be used to determine if the <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> is valid, the method returns <strong>E_FAIL</strong> when the variable is not valid.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476608</doc-id>
        /// <unmanaged>GetDesc</unmanaged>
        /// <unmanaged-short>GetDesc</unmanaged-short>
        public SharpDX.D3DCompiler.ShaderVariableDescription Description
        {
            get
            {
                GetDescription(out var __output__);
                return __output__;
            }
        }

        /// <summary>
        /// <p>This method returns the buffer of the current <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/></strong>.</p>
        /// </summary>
        /// <doc-id>dn933280</doc-id>
        /// <unmanaged>GetBuffer</unmanaged>
        /// <unmanaged-short>GetBuffer</unmanaged-short>
        public SharpDX.D3DCompiler.ConstantBuffer Buffer
        {
            get => GetBuffer();
        }

        /// <summary>
        /// <p>Get a shader-variable description.</p>
        /// </summary>
        /// <param name = "descRef"><dd>  <p>A reference to a shader-variable description (see <strong><see cref = "SharpDX.D3DCompiler.ShaderVariableDescription"/></strong>).</p> </dd></param>
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
        /// <remarks>
        /// <p>This method can be used to determine if the <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> is valid, the method returns <strong>E_FAIL</strong> when the variable is not valid.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476608</doc-id>
        /// <unmanaged>HRESULT ID3D11ShaderReflectionVariable::GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetDesc</unmanaged-short>
        internal unsafe void GetDescription(out SharpDX.D3DCompiler.ShaderVariableDescription descRef)
        {
            SharpDX.D3DCompiler.ShaderVariableDescription.__Native descRef_ = default (SharpDX.D3DCompiler.ShaderVariableDescription.__Native);
            descRef = default (SharpDX.D3DCompiler.ShaderVariableDescription);
            SharpDX.Result __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, &descRef_, (*(void ***)this._nativePointer)[0]);
            descRef.__MarshalFrom(ref descRef_);
            __result__.CheckError();
        }

        /// <summary>
        /// <p>Get a shader-variable type.</p>
        /// </summary>
        /// <returns><p>A reference to a <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>
        /// <remarks>
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476610</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionVariable::GetType()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetType</unmanaged-short>
        public unsafe SharpDX.D3DCompiler.ShaderReflectionType GetVariableType()
        {
            SharpDX.D3DCompiler.ShaderReflectionType __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[1]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ShaderReflectionType(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>This method returns the buffer of the current <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/></strong>.</p>
        /// </summary>
        /// <returns><p> Returns a reference to the <strong><see cref = "SharpDX.D3DCompiler.ConstantBuffer"/></strong> of the present <strong><see cref = "SharpDX.D3DCompiler.ShaderReflectionVariable"/></strong>. </p></returns>
        /// <doc-id>dn933280</doc-id>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflectionVariable::GetBuffer()</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetBuffer</unmanaged-short>
        internal unsafe SharpDX.D3DCompiler.ConstantBuffer GetBuffer()
        {
            SharpDX.D3DCompiler.ConstantBuffer __result__;
            System.IntPtr __result__native = System.IntPtr.Zero;
            __result__native = SharpDX.D3DCompiler.LocalInterop.CalliStdCallSystemIntPtr(this._nativePointer, (*(void ***)this._nativePointer)[2]);
            if (__result__native != System.IntPtr.Zero)
                __result__ = new SharpDX.D3DCompiler.ConstantBuffer(__result__native);
            else
                __result__ = null;
            return __result__;
        }

        /// <summary>
        /// <p>Gets the corresponding interface slot for a variable that represents an interface reference.</p>
        /// </summary>
        /// <param name = "uArrayIndex"><dd>  <p>Index of the array element to get the slot number for.  For a non-array variable this value will be zero.</p> </dd></param>
        /// <returns><p>Returns the index of the interface in the interface array.</p></returns>
        /// <remarks>
        /// <p>GetInterfaceSlot gets the corresponding slot in an dynamic linkage array for an interface instance.  The returned slot number is used to set an interface instance to a particular class instance.  See the HLSL Interfaces and Classes overview for additional information.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>
        /// </remarks>
        /// <doc-id>ff476609</doc-id>
        /// <unmanaged>unsigned int ID3D11ShaderReflectionVariable::GetInterfaceSlot([In] unsigned int uArrayIndex)</unmanaged>
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetInterfaceSlot</unmanaged-short>
        public unsafe System.Int32 GetInterfaceSlot(System.Int32 uArrayIndex)
        {
            System.Int32 __result__;
            __result__ = SharpDX.D3DCompiler.LocalInterop.CalliStdCallint(this._nativePointer, uArrayIndex, (*(void ***)this._nativePointer)[3]);
            return __result__;
        }
    }
}