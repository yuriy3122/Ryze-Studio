// <auto-generated/>

namespace SharpDX.D3DCompiler
{
    [System.FlagsAttribute]
    /// <summary>
    /// <p>Values that identify the indended use of a constant-data buffer.</p>
    /// </summary>
    /// <remarks>
    /// <p><strong><see cref = "SharpDX.D3DCompiler.ConstantBufferFlags"/></strong>-typed values are specified in the <strong>uFlags</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.ConstantBufferDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728729</doc-id>
    /// <unmanaged>D3D_SHADER_CBUFFER_FLAGS</unmanaged>
    /// <unmanaged-short>D3D_SHADER_CBUFFER_FLAGS</unmanaged-short>
    public enum ConstantBufferFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Bind the constant buffer to an input slot defined in HLSL code (instead of letting the compiler choose the input slot).</p> </dd>
        /// </summary>
        /// <doc-id>ff728729</doc-id>
        /// <unmanaged>D3D_CBF_USERPACKED</unmanaged>
        /// <unmanaged-short>D3D_CBF_USERPACKED</unmanaged-short>
        ConstantBufferUserpacked = unchecked ((System.Int32)(1)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify the intended use of constant-buffer data. </p>
    /// </summary>
    /// <doc-id>ff728722</doc-id>
    /// <unmanaged>D3D_CBUFFER_TYPE</unmanaged>
    /// <unmanaged-short>D3D_CBUFFER_TYPE</unmanaged-short>
    public enum ConstantBufferType : System.Int32
    {
        /// <summary>
        /// <dd> <p>A buffer containing scalar constants.</p> </dd>
        /// </summary>
        /// <doc-id>ff728722</doc-id>
        /// <unmanaged>D3D_CT_CBUFFER</unmanaged>
        /// <unmanaged-short>D3D_CT_CBUFFER</unmanaged-short>
        ConstantBuffer = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>A buffer containing texture data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728722</doc-id>
        /// <unmanaged>D3D_CT_TBUFFER</unmanaged>
        /// <unmanaged-short>D3D_CT_TBUFFER</unmanaged-short>
        TextureBuffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>A buffer containing interface references.</p> </dd>
        /// </summary>
        /// <doc-id>ff728722</doc-id>
        /// <unmanaged>D3D_CT_INTERFACE_POINTERS</unmanaged>
        /// <unmanaged-short>D3D_CT_INTERFACE_POINTERS</unmanaged-short>
        InterfacePointers = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>A buffer containing binding information.</p> </dd>
        /// </summary>
        /// <doc-id>ff728722</doc-id>
        /// <unmanaged>D3D_CT_RESOURCE_BIND_INFO</unmanaged>
        /// <unmanaged-short>D3D_CT_RESOURCE_BIND_INFO</unmanaged-short>
        ResourceBindInformation = unchecked ((System.Int32)(3))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3DCOMPILE_DISASM_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILE_DISASM_FLAGS</unmanaged-short>
    public enum DisassemblyFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_ENABLE_COLOR_CODE</unmanaged>
        /// <unmanaged-short>D3D_DISASM_ENABLE_COLOR_CODE</unmanaged-short>
        EnableColorCode = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS</unmanaged>
        /// <unmanaged-short>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS</unmanaged-short>
        EnableDefaultValuePrints = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING</unmanaged>
        /// <unmanaged-short>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING</unmanaged-short>
        EnableInstructionNumbering = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE</unmanaged>
        /// <unmanaged-short>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE</unmanaged-short>
        EnableInstructionCycle = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_DISABLE_DEBUG_INFO</unmanaged>
        /// <unmanaged-short>D3D_DISASM_DISABLE_DEBUG_INFO</unmanaged-short>
        DisableDebugInformation = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_OFFSET</unmanaged>
        /// <unmanaged-short>D3D_DISASM_ENABLE_INSTRUCTION_OFFSET</unmanaged-short>
        EnableInstructionOffset = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_INSTRUCTION_ONLY</unmanaged>
        /// <unmanaged-short>D3D_DISASM_INSTRUCTION_ONLY</unmanaged-short>
        InstructionOnly = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_DISASM_PRINT_HEX_LITERALS</unmanaged>
        /// <unmanaged-short>D3D_DISASM_PRINT_HEX_LITERALS</unmanaged-short>
        PrintHexLiterals = unchecked ((System.Int32)(128)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3DCOMPILE_EFFECT_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILE_EFFECT_FLAGS</unmanaged-short>
    public enum EffectFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_EFFECT_CHILD_EFFECT</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_EFFECT_CHILD_EFFECT</unmanaged-short>
        ChildEffect = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS</unmanaged-short>
        AllowSlowOperations = unchecked ((System.Int32)(2)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that indicate the location of a shader #include file. </p>
    /// </summary>
    /// <remarks>
    /// <p>You pass a <strong><see cref = "SharpDX.D3DCompiler.IncludeType"/></strong>-typed value to the  <em>IncludeType</em> parameter in a call to the  <strong>ID3DInclude::Open</strong> method to indicate the location of the #include file.</p>
    /// </remarks>
    /// <doc-id>ff728723</doc-id>
    /// <unmanaged>D3D_INCLUDE_TYPE</unmanaged>
    /// <unmanaged-short>D3D_INCLUDE_TYPE</unmanaged-short>
    public enum IncludeType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The local directory.</p> </dd>
        /// </summary>
        /// <doc-id>ff728723</doc-id>
        /// <unmanaged>D3D_INCLUDE_LOCAL</unmanaged>
        /// <unmanaged-short>D3D_INCLUDE_LOCAL</unmanaged-short>
        Local = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The system directory.</p> </dd>
        /// </summary>
        /// <doc-id>ff728723</doc-id>
        /// <unmanaged>D3D_INCLUDE_SYSTEM</unmanaged>
        /// <unmanaged-short>D3D_INCLUDE_SYSTEM</unmanaged-short>
        System = unchecked ((System.Int32)(1))}

    /// <summary>
    /// <p>Values that indicate how the pipeline interprets geometry or hull shader input primitives.</p>
    /// </summary>
    /// <remarks>
    /// <p> The <strong>ID3D11ShaderReflection::GetGSInputPrimitive</strong> method returns a <strong><see cref = "SharpDX.D3DCompiler.InputPrimitive"/></strong>-typed value. </p>
    /// </remarks>
    /// <doc-id>ff728725</doc-id>
    /// <unmanaged>D3D_PRIMITIVE</unmanaged>
    /// <unmanaged-short>D3D_PRIMITIVE</unmanaged-short>
    public enum InputPrimitive : System.Int32
    {
        /// <summary>
        /// <dd> <p> The shader has not been initialized with an input primitive type. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a point. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_POINT</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_POINT</unmanaged-short>
        Point = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a line. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_LINE</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_LINE</unmanaged-short>
        Line = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a triangle. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TRIANGLE</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TRIANGLE</unmanaged-short>
        Triangle = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a line with adjacency data. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_LINE_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_LINE_ADJ</unmanaged-short>
        LineWithAdjacency = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a triangle with adjacency data. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_TRIANGLE_ADJ</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_TRIANGLE_ADJ</unmanaged-short>
        TriangleWithAdjacency = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_1_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_1_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith1ControlPoints = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_2_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_2_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith2ControlPoints = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_3_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_3_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith3ControlPoints = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_4_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_4_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith4ControlPoints = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_5_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_5_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith5ControlPoints = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_6_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_6_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith6ControlPoints = unchecked ((System.Int32)(13)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_7_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_7_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith7ControlPoints = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_8_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_8_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith8ControlPoints = unchecked ((System.Int32)(15)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_9_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_9_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith9ControlPoints = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_10_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_10_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith10ControlPoints = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_11_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_11_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith11ControlPoints = unchecked ((System.Int32)(18)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_12_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_12_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith12ControlPoints = unchecked ((System.Int32)(19)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_13_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_13_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith13ControlPoints = unchecked ((System.Int32)(20)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_14_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_14_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith14ControlPoints = unchecked ((System.Int32)(21)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_15_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_15_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith15ControlPoints = unchecked ((System.Int32)(22)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_16_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_16_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith16ControlPoints = unchecked ((System.Int32)(23)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_17_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_17_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith17ControlPoints = unchecked ((System.Int32)(24)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_18_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_18_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith18ControlPoints = unchecked ((System.Int32)(25)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_19_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_19_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith19ControlPoints = unchecked ((System.Int32)(26)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_20_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_20_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith20ControlPoints = unchecked ((System.Int32)(27)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_21_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_21_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith21ControlPoints = unchecked ((System.Int32)(28)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_22_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_22_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith22ControlPoints = unchecked ((System.Int32)(29)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_23_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_23_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith23ControlPoints = unchecked ((System.Int32)(30)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_24_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_24_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith24ControlPoints = unchecked ((System.Int32)(31)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_25_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_25_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith25ControlPoints = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_26_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_26_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith26ControlPoints = unchecked ((System.Int32)(33)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_27_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_27_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith27ControlPoints = unchecked ((System.Int32)(34)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_28_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_28_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith28ControlPoints = unchecked ((System.Int32)(35)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_29_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_29_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith29ControlPoints = unchecked ((System.Int32)(36)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_30_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_30_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith30ControlPoints = unchecked ((System.Int32)(37)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_31_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_31_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith31ControlPoints = unchecked ((System.Int32)(38)),
        /// <summary>
        /// <dd> <p> Interpret the input primitive as a control point patch. </p> </dd>
        /// </summary>
        /// <doc-id>ff728725</doc-id>
        /// <unmanaged>D3D_PRIMITIVE_32_CONTROL_POINT_PATCH</unmanaged>
        /// <unmanaged-short>D3D_PRIMITIVE_32_CONTROL_POINT_PATCH</unmanaged-short>
        PatchWith32ControlPoints = unchecked ((System.Int32)(39))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Indicates semantic flags for function parameters.</p>
    /// </summary>
    /// <doc-id>dn280475</doc-id>
    /// <unmanaged>D3D_PARAMETER_FLAGS</unmanaged>
    /// <unmanaged-short>D3D_PARAMETER_FLAGS</unmanaged-short>
    public enum ParameterFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>The parameter has no semantic flags.</p> </dd>
        /// </summary>
        /// <doc-id>dn280475</doc-id>
        /// <unmanaged>D3D_PF_NONE</unmanaged>
        /// <unmanaged-short>D3D_PF_NONE</unmanaged-short>
        None = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Indicates an input parameter.</p> </dd>
        /// </summary>
        /// <doc-id>dn280475</doc-id>
        /// <unmanaged>D3D_PF_IN</unmanaged>
        /// <unmanaged-short>D3D_PF_IN</unmanaged-short>
        In = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates an output parameter.</p> </dd>
        /// </summary>
        /// <doc-id>dn280475</doc-id>
        /// <unmanaged>D3D_PF_OUT</unmanaged>
        /// <unmanaged-short>D3D_PF_OUT</unmanaged-short>
        Out = unchecked ((System.Int32)(2))}

    /// <summary>
    /// <p>Values that identify the data types that can be stored in a register.</p>
    /// </summary>
    /// <remarks>
    /// <p>A register component type is specified in the <strong>ComponentType</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728727</doc-id>
    /// <unmanaged>D3D_REGISTER_COMPONENT_TYPE</unmanaged>
    /// <unmanaged-short>D3D_REGISTER_COMPONENT_TYPE</unmanaged-short>
    public enum RegisterComponentType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The data type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>ff728727</doc-id>
        /// <unmanaged>D3D_REGISTER_COMPONENT_UNKNOWN</unmanaged>
        /// <unmanaged-short>D3D_REGISTER_COMPONENT_UNKNOWN</unmanaged-short>
        Unknown = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>32-bit unsigned integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728727</doc-id>
        /// <unmanaged>D3D_REGISTER_COMPONENT_UINT32</unmanaged>
        /// <unmanaged-short>D3D_REGISTER_COMPONENT_UINT32</unmanaged-short>
        UInt32 = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>32-bit signed integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728727</doc-id>
        /// <unmanaged>D3D_REGISTER_COMPONENT_SINT32</unmanaged>
        /// <unmanaged-short>D3D_REGISTER_COMPONENT_SINT32</unmanaged-short>
        SInt32 = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>32-bit floating-point number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728727</doc-id>
        /// <unmanaged>D3D_REGISTER_COMPONENT_FLOAT32</unmanaged>
        /// <unmanaged-short>D3D_REGISTER_COMPONENT_FLOAT32</unmanaged-short>
        Float32 = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Values that identify the return type of a resource.</p>
    /// </summary>
    /// <remarks>
    /// <p>A resource return type is specified in the <strong>ReturnType</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728728</doc-id>
    /// <unmanaged>D3D_RESOURCE_RETURN_TYPE</unmanaged>
    /// <unmanaged-short>D3D_RESOURCE_RETURN_TYPE</unmanaged-short>
    public enum ResourceReturnType : System.Int32
    {
        /// <summary>
        /// <dd> <p>Return type is an unsigned integer value normalized to a value between 0 and 1.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_UNORM</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_UNORM</unmanaged-short>
        UNorm = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Return type is a signed integer value normalized to a value between -1 and 1.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_SNORM</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_SNORM</unmanaged-short>
        SNorm = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Return type is a signed integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_SINT</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_SINT</unmanaged-short>
        SInt = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Return type is an unsigned integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_UINT</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_UINT</unmanaged-short>
        UInt = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Return type is a floating-point number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_FLOAT</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Return type is unknown.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_MIXED</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_MIXED</unmanaged-short>
        Mixed = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>Return type is a double-precision value.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_DOUBLE</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_DOUBLE</unmanaged-short>
        Double = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>Return type is a multiple-dword type, such as a double or uint64, and the component is continued from the previous component that was declared.  The first component represents the lower bits.</p> </dd>
        /// </summary>
        /// <doc-id>ff728728</doc-id>
        /// <unmanaged>D3D_RETURN_TYPE_CONTINUED</unmanaged>
        /// <unmanaged-short>D3D_RETURN_TYPE_CONTINUED</unmanaged-short>
        Continued = unchecked ((System.Int32)(8))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3DCOMPILE_SECDATA_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILE_SECDATA_FLAGS</unmanaged-short>
    public enum SecondaryDataFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS</unmanaged-short>
        MergeUnorderedAccessViewSlots = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS</unmanaged-short>
        PreserveTemplateSlots = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH</unmanaged-short>
        RequireTemplateMatch = unchecked ((System.Int32)(4)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify parts of the content of an arbitrary length data buffer.</p>
    /// </summary>
    /// <remarks>
    /// <p>These values are passed to the <strong>D3DGetBlobPart</strong> or  <strong>D3DSetBlobPart</strong> function.</p>
    /// </remarks>
    /// <doc-id>ff728720</doc-id>
    /// <unmanaged>D3D_BLOB_PART</unmanaged>
    /// <unmanaged-short>D3D_BLOB_PART</unmanaged-short>
    public enum ShaderBytecodePart : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_INPUT_SIGNATURE_BLOB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_INPUT_SIGNATURE_BLOB</unmanaged-short>
        InputSignatureBlob = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_OUTPUT_SIGNATURE_BLOB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_OUTPUT_SIGNATURE_BLOB</unmanaged-short>
        OutputSignatureBlob = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB</unmanaged-short>
        InputAndOutputSignatureBlob = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB</unmanaged-short>
        PatchConstantSignatureBlob = unchecked ((System.Int32)(3)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_ALL_SIGNATURE_BLOB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_ALL_SIGNATURE_BLOB</unmanaged-short>
        AllSignatureBlob = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_DEBUG_INFO</unmanaged>
        /// <unmanaged-short>D3D_BLOB_DEBUG_INFO</unmanaged-short>
        DebugInformation = unchecked ((System.Int32)(5)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_LEGACY_SHADER</unmanaged>
        /// <unmanaged-short>D3D_BLOB_LEGACY_SHADER</unmanaged-short>
        LegacyShader = unchecked ((System.Int32)(6)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_XNA_PREPASS_SHADER</unmanaged>
        /// <unmanaged-short>D3D_BLOB_XNA_PREPASS_SHADER</unmanaged-short>
        XnaPrepassShader = unchecked ((System.Int32)(7)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_XNA_SHADER</unmanaged>
        /// <unmanaged-short>D3D_BLOB_XNA_SHADER</unmanaged-short>
        XnaShader = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_PDB</unmanaged>
        /// <unmanaged-short>D3D_BLOB_PDB</unmanaged-short>
        Pdb = unchecked ((System.Int32)(9)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_PRIVATE_DATA</unmanaged>
        /// <unmanaged-short>D3D_BLOB_PRIVATE_DATA</unmanaged-short>
        PrivateData = unchecked ((System.Int32)(10)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3D_BLOB_ROOT_SIGNATURE</unmanaged-short>
        RootSignature = unchecked ((System.Int32)(11)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_DEBUG_NAME</unmanaged>
        /// <unmanaged-short>D3D_BLOB_DEBUG_NAME</unmanaged-short>
        DebugName = unchecked ((System.Int32)(12)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_TEST_ALTERNATE_SHADER</unmanaged>
        /// <unmanaged-short>D3D_BLOB_TEST_ALTERNATE_SHADER</unmanaged-short>
        TestAlternateShader = unchecked ((System.Int32)(32768)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_TEST_COMPILE_DETAILS</unmanaged>
        /// <unmanaged-short>D3D_BLOB_TEST_COMPILE_DETAILS</unmanaged-short>
        TestCompileDetails = unchecked ((System.Int32)(32769)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_TEST_COMPILE_PERF</unmanaged>
        /// <unmanaged-short>D3D_BLOB_TEST_COMPILE_PERF</unmanaged-short>
        TestCompilePerf = unchecked ((System.Int32)(32770)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ff728720</doc-id>
        /// <unmanaged>D3D_BLOB_TEST_COMPILE_REPORT</unmanaged>
        /// <unmanaged-short>D3D_BLOB_TEST_COMPILE_REPORT</unmanaged-short>
        TestCompileReport = unchecked ((System.Int32)(32771))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3DCOMPILE_SHADER_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILE_SHADER_FLAGS</unmanaged-short>
    public enum ShaderFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_DEBUG</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_DEBUG</unmanaged-short>
        Debug = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_SKIP_VALIDATION</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_SKIP_VALIDATION</unmanaged-short>
        SkipValidation = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_SKIP_OPTIMIZATION</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_SKIP_OPTIMIZATION</unmanaged-short>
        SkipOptimization = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_PACK_MATRIX_ROW_MAJOR</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_PACK_MATRIX_ROW_MAJOR</unmanaged-short>
        PackMatrixRowMajor = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR</unmanaged-short>
        PackMatrixColumnMajor = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_PARTIAL_PRECISION</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_PARTIAL_PRECISION</unmanaged-short>
        PartialPrecision = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT</unmanaged-short>
        ForceVertexShaderSoftwareNoOptimization = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT</unmanaged-short>
        ForcePixelShaderSoftwareNoOptimization = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_NO_PRESHADER</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_NO_PRESHADER</unmanaged-short>
        NoPreshader = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_AVOID_FLOW_CONTROL</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_AVOID_FLOW_CONTROL</unmanaged-short>
        AvoidFlowControl = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_PREFER_FLOW_CONTROL</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_PREFER_FLOW_CONTROL</unmanaged-short>
        PreferFlowControl = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_ENABLE_STRICTNESS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_ENABLE_STRICTNESS</unmanaged-short>
        EnableStrictness = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY</unmanaged-short>
        EnableBackwardsCompatibility = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_IEEE_STRICTNESS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_IEEE_STRICTNESS</unmanaged-short>
        IeeeStrictness = unchecked ((System.Int32)(8192)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL0</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_OPTIMIZATION_LEVEL0</unmanaged-short>
        OptimizationLevel0 = unchecked ((System.Int32)(16384)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL1</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_OPTIMIZATION_LEVEL1</unmanaged-short>
        OptimizationLevel1 = unchecked ((System.Int32)(0)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL2</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_OPTIMIZATION_LEVEL2</unmanaged-short>
        OptimizationLevel2 = unchecked ((System.Int32)(49152)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL3</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_OPTIMIZATION_LEVEL3</unmanaged-short>
        OptimizationLevel3 = unchecked ((System.Int32)(32768)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_RESERVED16</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_RESERVED16</unmanaged-short>
        Reserved16 = unchecked ((System.Int32)(65536)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_RESERVED17</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_RESERVED17</unmanaged-short>
        Reserved17 = unchecked ((System.Int32)(131072)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_WARNINGS_ARE_ERRORS</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_WARNINGS_ARE_ERRORS</unmanaged-short>
        WarningsAreErrors = unchecked ((System.Int32)(262144)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_DEBUG_NAME_FOR_SOURCE</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_DEBUG_NAME_FOR_SOURCE</unmanaged-short>
        DebugNameForSource = unchecked ((System.Int32)(4194304)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3DCOMPILE_DEBUG_NAME_FOR_BINARY</unmanaged>
        /// <unmanaged-short>D3DCOMPILE_DEBUG_NAME_FOR_BINARY</unmanaged-short>
        DebugNameForBinary = unchecked ((System.Int32)(8388608)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Values that identify shader-input options.</p>
    /// </summary>
    /// <remarks>
    /// <p><strong><see cref = "SharpDX.D3DCompiler.ShaderInputFlags"/></strong>-typed values are specified in the <strong>uFlags</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure. </p>
    /// </remarks>
    /// <doc-id>ff728730</doc-id>
    /// <unmanaged>D3D_SHADER_INPUT_FLAGS</unmanaged>
    /// <unmanaged-short>D3D_SHADER_INPUT_FLAGS</unmanaged-short>
    public enum ShaderInputFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p> Assign a shader input to a register based on the register assignment in the HLSL code (instead of letting the compiler choose the register). </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_USERPACKED</unmanaged>
        /// <unmanaged-short>D3D_SIF_USERPACKED</unmanaged-short>
        Userpacked = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p> Use a comparison sampler, which uses the SampleCmp (DirectX HLSL Texture Object) and SampleCmpLevelZero (DirectX HLSL Texture Object) sampling functions. </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_COMPARISON_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D_SIF_COMPARISON_SAMPLER</unmanaged-short>
        ComparisonSampler = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p> A 2-bit value for encoding texture components. </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENT_0</unmanaged>
        /// <unmanaged-short>D3D_SIF_TEXTURE_COMPONENT_0</unmanaged-short>
        TextureComponent0 = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p> A 2-bit value for encoding texture components. </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENT_1</unmanaged>
        /// <unmanaged-short>D3D_SIF_TEXTURE_COMPONENT_1</unmanaged-short>
        TextureComponent1 = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p> A 2-bit value for encoding texture components. </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENTS</unmanaged>
        /// <unmanaged-short>D3D_SIF_TEXTURE_COMPONENTS</unmanaged-short>
        TextureComponents = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p> This value is reserved. </p> </dd>
        /// </summary>
        /// <doc-id>ff728730</doc-id>
        /// <unmanaged>D3D_SIF_UNUSED</unmanaged>
        /// <unmanaged-short>D3D_SIF_UNUSED</unmanaged-short>
        Unused = unchecked ((System.Int32)(16)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify resource types that can be bound to a shader and that are reflected as part of the resource description for the shader.</p>
    /// </summary>
    /// <remarks>
    /// <p><strong><see cref = "SharpDX.D3DCompiler.ShaderInputType"/></strong>-typed values are specified in the <strong>Type</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728731</doc-id>
    /// <unmanaged>D3D_SHADER_INPUT_TYPE</unmanaged>
    /// <unmanaged-short>D3D_SHADER_INPUT_TYPE</unmanaged-short>
    public enum ShaderInputType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The shader resource is a constant buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_CBUFFER</unmanaged>
        /// <unmanaged-short>D3D_SIT_CBUFFER</unmanaged-short>
        ConstantBuffer = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The shader resource is a texture buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_TBUFFER</unmanaged>
        /// <unmanaged-short>D3D_SIT_TBUFFER</unmanaged-short>
        TextureBuffer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The shader resource is a texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_TEXTURE</unmanaged>
        /// <unmanaged-short>D3D_SIT_TEXTURE</unmanaged-short>
        Texture = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The shader resource is a sampler.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D_SIT_SAMPLER</unmanaged-short>
        Sampler = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The shader resource is a read-and-write buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_RWTYPED</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_RWTYPED</unmanaged-short>
        UnorderedAccessViewRWTyped = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The shader resource is a structured buffer.</p> <p>For more information about structured buffer, see the <strong>Remarks</strong> section.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_STRUCTURED</unmanaged>
        /// <unmanaged-short>D3D_SIT_STRUCTURED</unmanaged-short>
        Structured = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The shader resource is a read-and-write structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_RWSTRUCTURED</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_RWSTRUCTURED</unmanaged-short>
        UnorderedAccessViewRWStructured = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The shader resource is a byte-address buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_BYTEADDRESS</unmanaged>
        /// <unmanaged-short>D3D_SIT_BYTEADDRESS</unmanaged-short>
        ByteAddress = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The shader resource is a read-and-write byte-address buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_RWBYTEADDRESS</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_RWBYTEADDRESS</unmanaged-short>
        UnorderedAccessViewRWByteAddress = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The shader resource is an append-structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_APPEND_STRUCTURED</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_APPEND_STRUCTURED</unmanaged-short>
        UnorderedAccessViewAppendStructured = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The shader resource is a consume-structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_CONSUME_STRUCTURED</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_CONSUME_STRUCTURED</unmanaged-short>
        UnorderedAccessViewConsumeStructured = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>The shader resource is a read-and-write structured buffer that uses the built-in counter to append or consume.</p> </dd>
        /// </summary>
        /// <doc-id>ff728731</doc-id>
        /// <unmanaged>D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER</unmanaged>
        /// <unmanaged-short>D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER</unmanaged-short>
        UnorderedAccessViewRWStructuredWithCounter = unchecked ((System.Int32)(11))}

    [System.FlagsAttribute]
    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>D3DCOMPILE_SHADER_REQUIRES_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILE_SHADER_REQUIRES_FLAGS</unmanaged-short>
    public enum ShaderRequiresFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_DOUBLES</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_DOUBLES</unmanaged-short>
        ShaderRequiresDoubles = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL</unmanaged-short>
        ShaderRequiresEarlyDepthStencil = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE</unmanaged-short>
        ShaderRequiresUnorderedAccessViewsAtEveryStage = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_64_UAVS</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_64_UAVS</unmanaged-short>
        ShaderRequires64UnorderedAccessViews = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_MINIMUM_PRECISION</unmanaged-short>
        ShaderRequiresMinimumPrecision = unchecked ((System.Int32)(16)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS</unmanaged-short>
        ShaderRequires111DoubleExtensionS = unchecked ((System.Int32)(32)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS</unmanaged-short>
        ShaderRequires111ShaderExtensionS = unchecked ((System.Int32)(64)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING</unmanaged-short>
        ShaderRequiresLevel9ComparisonFiltering = unchecked ((System.Int32)(128)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_TILED_RESOURCES</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_TILED_RESOURCES</unmanaged-short>
        ShaderRequiresTiledResources = unchecked ((System.Int32)(256)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_STENCIL_REF</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_STENCIL_REF</unmanaged-short>
        ShaderRequiresStencilRef = unchecked ((System.Int32)(512)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_INNER_COVERAGE</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_INNER_COVERAGE</unmanaged-short>
        ShaderRequiresInnerCoverage = unchecked ((System.Int32)(1024)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS</unmanaged-short>
        ShaderRequiresTypedUnorderedAccessViewLoadAdditionalFormatS = unchecked ((System.Int32)(2048)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_ROVS</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_ROVS</unmanaged-short>
        ShaderRequiresRovs = unchecked ((System.Int32)(4096)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER</unmanaged>
        /// <unmanaged-short>D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER</unmanaged-short>
        ShaderRequiresViewportAndRtArrayIndexFromAnyShaderFeedingRasterizer = unchecked ((System.Int32)(8192)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify the class of a shader variable.</p>
    /// </summary>
    /// <remarks>
    /// <p>The class of a shader variable is not a programming class; the class identifies the variable class such as scalar, vector, object, and so on. <strong><see cref = "SharpDX.D3DCompiler.ShaderVariableClass"/></strong>-typed values are specified in the <strong>Class</strong> member of the <strong><see cref = "SharpDX.D3DCompiler.ShaderTypeDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728733</doc-id>
    /// <unmanaged>D3D_SHADER_VARIABLE_CLASS</unmanaged>
    /// <unmanaged-short>D3D_SHADER_VARIABLE_CLASS</unmanaged-short>
    public enum ShaderVariableClass : System.Int32
    {
        /// <summary>
        /// <dd> <p>The shader variable is a scalar.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_SCALAR</unmanaged>
        /// <unmanaged-short>D3D_SVC_SCALAR</unmanaged-short>
        Scalar = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The shader variable is a vector.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_VECTOR</unmanaged>
        /// <unmanaged-short>D3D_SVC_VECTOR</unmanaged-short>
        Vector = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The shader variable is a row-major matrix.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_MATRIX_ROWS</unmanaged>
        /// <unmanaged-short>D3D_SVC_MATRIX_ROWS</unmanaged-short>
        MatrixRows = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The shader variable is a column-major matrix.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_MATRIX_COLUMNS</unmanaged>
        /// <unmanaged-short>D3D_SVC_MATRIX_COLUMNS</unmanaged-short>
        MatrixColumns = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The shader variable is an object.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_OBJECT</unmanaged>
        /// <unmanaged-short>D3D_SVC_OBJECT</unmanaged-short>
        Object = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The shader variable is a structure.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_STRUCT</unmanaged>
        /// <unmanaged-short>D3D_SVC_STRUCT</unmanaged-short>
        Struct = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The shader variable is a class.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_INTERFACE_CLASS</unmanaged>
        /// <unmanaged-short>D3D_SVC_INTERFACE_CLASS</unmanaged-short>
        InterfaceClass = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The shader variable is an interface.</p> </dd>
        /// </summary>
        /// <doc-id>ff728733</doc-id>
        /// <unmanaged>D3D_SVC_INTERFACE_POINTER</unmanaged>
        /// <unmanaged-short>D3D_SVC_INTERFACE_POINTER</unmanaged-short>
        InterfacePointer = unchecked ((System.Int32)(7))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Values that identify information about a shader variable.</p>
    /// </summary>
    /// <remarks>
    /// <p>A call to the  <strong>ID3D11ShaderReflectionVariable::GetDesc</strong> method returns <strong><see cref = "SharpDX.D3DCompiler.ShaderVariableFlags"/></strong> values in the  <strong>uFlags</strong> member of a  <strong><see cref = "SharpDX.D3DCompiler.ShaderVariableDescription"/></strong> structure.</p>
    /// </remarks>
    /// <doc-id>ff728734</doc-id>
    /// <unmanaged>D3D_SHADER_VARIABLE_FLAGS</unmanaged>
    /// <unmanaged-short>D3D_SHADER_VARIABLE_FLAGS</unmanaged-short>
    public enum ShaderVariableFlags : System.Int32
    {
        /// <summary>
        /// <dd> <p>Indicates that the registers assigned to this shader variable were explicitly declared in shader code (instead of automatically assigned by the compiler).</p> </dd>
        /// </summary>
        /// <doc-id>ff728734</doc-id>
        /// <unmanaged>D3D_SVF_USERPACKED</unmanaged>
        /// <unmanaged-short>D3D_SVF_USERPACKED</unmanaged-short>
        Userpacked = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Indicates that this variable is used by this shader. This value confirms that a particular shader variable (which can be common to many different shaders) is indeed used by a particular shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728734</doc-id>
        /// <unmanaged>D3D_SVF_USED</unmanaged>
        /// <unmanaged-short>D3D_SVF_USED</unmanaged-short>
        Used = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Indicates that this variable is an interface.</p> </dd>
        /// </summary>
        /// <doc-id>ff728734</doc-id>
        /// <unmanaged>D3D_SVF_INTERFACE_POINTER</unmanaged>
        /// <unmanaged-short>D3D_SVF_INTERFACE_POINTER</unmanaged-short>
        InterfacePointer = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Indicates that this variable is a parameter of an interface.</p> </dd>
        /// </summary>
        /// <doc-id>ff728734</doc-id>
        /// <unmanaged>D3D_SVF_INTERFACE_PARAMETER</unmanaged>
        /// <unmanaged-short>D3D_SVF_INTERFACE_PARAMETER</unmanaged-short>
        InterfaceParameter = unchecked ((System.Int32)(8)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify various data, texture, and buffer types that can be assigned to a shader variable.</p>
    /// </summary>
    /// <remarks>
    /// <p> A call to the <strong>ID3D11ShaderReflectionType::GetDesc</strong> method returns a <strong><see cref = "SharpDX.D3DCompiler.ShaderVariableType"/></strong> value in the <strong>Type</strong> member of a <strong><see cref = "SharpDX.D3DCompiler.ShaderTypeDescription"/></strong> structure. </p><p> The types in a structured buffer describe the structure of the elements in the buffer. The layout of these types generally match their C++ struct counterparts. The following examples show structured buffers: </p><pre>struct mystruct {float4 val; uint ind;}; RWStructuredBuffer&lt;mystruct&gt; rwbuf; RWStructuredBuffer&lt;float3&gt; rwbuf2;</pre>
    /// </remarks>
    /// <doc-id>ff728735</doc-id>
    /// <unmanaged>D3D_SHADER_VARIABLE_TYPE</unmanaged>
    /// <unmanaged-short>D3D_SHADER_VARIABLE_TYPE</unmanaged-short>
    public enum ShaderVariableType : System.Int32
    {
        /// <summary>
        /// <dd> <p>The variable is a void reference.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_VOID</unmanaged>
        /// <unmanaged-short>D3D_SVT_VOID</unmanaged-short>
        Void = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The variable is a boolean.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_BOOL</unmanaged>
        /// <unmanaged-short>D3D_SVT_BOOL</unmanaged-short>
        Bool = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The variable is an integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_INT</unmanaged>
        /// <unmanaged-short>D3D_SVT_INT</unmanaged-short>
        Int = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The variable is a floating-point number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_FLOAT</unmanaged>
        /// <unmanaged-short>D3D_SVT_FLOAT</unmanaged-short>
        Float = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The variable is a string.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_STRING</unmanaged>
        /// <unmanaged-short>D3D_SVT_STRING</unmanaged-short>
        String = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>The variable is a texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE</unmanaged-short>
        Texture = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>The variable is a 1D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE1D</unmanaged-short>
        Texture1D = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>The variable is a 2D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE2D</unmanaged-short>
        Texture2D = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>The variable is a 3D texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE3D</unmanaged-short>
        Texture3D = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>The variable is a texture cube.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURECUBE</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURECUBE</unmanaged-short>
        TextureCube = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>The variable is a sampler.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_SAMPLER</unmanaged>
        /// <unmanaged-short>D3D_SVT_SAMPLER</unmanaged-short>
        Sampler = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p> The variable is a 1D sampler. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_SAMPLER1D</unmanaged>
        /// <unmanaged-short>D3D_SVT_SAMPLER1D</unmanaged-short>
        Sampler1D = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p> The variable is a 2D sampler. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_SAMPLER2D</unmanaged>
        /// <unmanaged-short>D3D_SVT_SAMPLER2D</unmanaged-short>
        Sampler2D = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p> The variable is a 3D sampler. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_SAMPLER3D</unmanaged>
        /// <unmanaged-short>D3D_SVT_SAMPLER3D</unmanaged-short>
        Sampler3D = unchecked ((System.Int32)(13)),
        /// <summary>
        /// <dd> <p> The variable is a cube sampler. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_SAMPLERCUBE</unmanaged>
        /// <unmanaged-short>D3D_SVT_SAMPLERCUBE</unmanaged-short>
        SamplerCube = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>The variable is a pixel shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_PIXELSHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_PIXELSHADER</unmanaged-short>
        PixelShader = unchecked ((System.Int32)(15)),
        /// <summary>
        /// <dd> <p>The variable is a vertex shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_VERTEXSHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_VERTEXSHADER</unmanaged-short>
        VertexShader = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p> The variable is a pixel fragment. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_PIXELFRAGMENT</unmanaged>
        /// <unmanaged-short>D3D_SVT_PIXELFRAGMENT</unmanaged-short>
        PixelFragment = unchecked ((System.Int32)(17)),
        /// <summary>
        /// <dd> <p> The variable is a vertex fragment. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_VERTEXFRAGMENT</unmanaged>
        /// <unmanaged-short>D3D_SVT_VERTEXFRAGMENT</unmanaged-short>
        VertexFragment = unchecked ((System.Int32)(18)),
        /// <summary>
        /// <dd> <p>The variable is an unsigned integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_UINT</unmanaged>
        /// <unmanaged-short>D3D_SVT_UINT</unmanaged-short>
        UInt = unchecked ((System.Int32)(19)),
        /// <summary>
        /// <dd> <p>The variable is an 8-bit unsigned integer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_UINT8</unmanaged>
        /// <unmanaged-short>D3D_SVT_UINT8</unmanaged-short>
        UInt8 = unchecked ((System.Int32)(20)),
        /// <summary>
        /// <dd> <p>The variable is a geometry shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_GEOMETRYSHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_GEOMETRYSHADER</unmanaged-short>
        GeometryShader = unchecked ((System.Int32)(21)),
        /// <summary>
        /// <dd> <p>The variable is a rasterizer-state object.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RASTERIZER</unmanaged>
        /// <unmanaged-short>D3D_SVT_RASTERIZER</unmanaged-short>
        Rasterizer = unchecked ((System.Int32)(22)),
        /// <summary>
        /// <dd> <p>The variable is a depth-stencil-state object.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_DEPTHSTENCIL</unmanaged>
        /// <unmanaged-short>D3D_SVT_DEPTHSTENCIL</unmanaged-short>
        DepthStencil = unchecked ((System.Int32)(23)),
        /// <summary>
        /// <dd> <p>The variable is a blend-state object.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_BLEND</unmanaged>
        /// <unmanaged-short>D3D_SVT_BLEND</unmanaged-short>
        Blend = unchecked ((System.Int32)(24)),
        /// <summary>
        /// <dd> <p>The variable is a buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_BUFFER</unmanaged-short>
        Buffer = unchecked ((System.Int32)(25)),
        /// <summary>
        /// <dd> <p>The variable is a constant buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_CBUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_CBUFFER</unmanaged-short>
        ConstantBuffer = unchecked ((System.Int32)(26)),
        /// <summary>
        /// <dd> <p>The variable is a texture buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TBUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_TBUFFER</unmanaged-short>
        TextureBuffer = unchecked ((System.Int32)(27)),
        /// <summary>
        /// <dd> <p>The variable is a 1D-texture array.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE1DARRAY</unmanaged-short>
        Texture1DArray = unchecked ((System.Int32)(28)),
        /// <summary>
        /// <dd> <p>The variable is a 2D-texture array.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE2DARRAY</unmanaged-short>
        Texture2DArray = unchecked ((System.Int32)(29)),
        /// <summary>
        /// <dd> <p>The variable is a render-target view.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RENDERTARGETVIEW</unmanaged>
        /// <unmanaged-short>D3D_SVT_RENDERTARGETVIEW</unmanaged-short>
        RenderTargetView = unchecked ((System.Int32)(30)),
        /// <summary>
        /// <dd> <p>The variable is a depth-stencil view.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_DEPTHSTENCILVIEW</unmanaged>
        /// <unmanaged-short>D3D_SVT_DEPTHSTENCILVIEW</unmanaged-short>
        DepthStencilView = unchecked ((System.Int32)(31)),
        /// <summary>
        /// <dd> <p>The variable is a 2D-multisampled texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE2DMS</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE2DMS</unmanaged-short>
        Texture2DMultisampled = unchecked ((System.Int32)(32)),
        /// <summary>
        /// <dd> <p>The variable is a 2D-multisampled-texture array.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURE2DMSARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURE2DMSARRAY</unmanaged-short>
        Texture2DMultisampledArray = unchecked ((System.Int32)(33)),
        /// <summary>
        /// <dd> <p>The variable is a texture-cube array.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_TEXTURECUBEARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_TEXTURECUBEARRAY</unmanaged-short>
        TextureCubeArray = unchecked ((System.Int32)(34)),
        /// <summary>
        /// <dd> <p>The variable holds a compiled hull-shader binary.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_HULLSHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_HULLSHADER</unmanaged-short>
        HullShader = unchecked ((System.Int32)(35)),
        /// <summary>
        /// <dd> <p>The variable holds a compiled domain-shader binary.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_DOMAINSHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_DOMAINSHADER</unmanaged-short>
        DomainShader = unchecked ((System.Int32)(36)),
        /// <summary>
        /// <dd> <p>The variable is an interface.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_INTERFACE_POINTER</unmanaged>
        /// <unmanaged-short>D3D_SVT_INTERFACE_POINTER</unmanaged-short>
        InterfacePointer = unchecked ((System.Int32)(37)),
        /// <summary>
        /// <dd> <p>The variable holds a compiled compute-shader binary.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_COMPUTESHADER</unmanaged>
        /// <unmanaged-short>D3D_SVT_COMPUTESHADER</unmanaged-short>
        ComputeShader = unchecked ((System.Int32)(38)),
        /// <summary>
        /// <dd> <p>The variable is a double precision (64-bit) floating-point number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_DOUBLE</unmanaged>
        /// <unmanaged-short>D3D_SVT_DOUBLE</unmanaged-short>
        Double = unchecked ((System.Int32)(39)),
        /// <summary>
        /// <dd> <p>The variable is a 1D read-and-write texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWTEXTURE1D</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWTEXTURE1D</unmanaged-short>
        RWTexture1D = unchecked ((System.Int32)(40)),
        /// <summary>
        /// <dd> <p>The variable is an array of 1D read-and-write textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWTEXTURE1DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWTEXTURE1DARRAY</unmanaged-short>
        RWTexture1DArray = unchecked ((System.Int32)(41)),
        /// <summary>
        /// <dd> <p>The variable is a 2D read-and-write texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWTEXTURE2D</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWTEXTURE2D</unmanaged-short>
        RWTexture2D = unchecked ((System.Int32)(42)),
        /// <summary>
        /// <dd> <p>The variable is an array of 2D read-and-write textures.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWTEXTURE2DARRAY</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWTEXTURE2DARRAY</unmanaged-short>
        RWTexture2DArray = unchecked ((System.Int32)(43)),
        /// <summary>
        /// <dd> <p>The variable is a 3D read-and-write texture.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWTEXTURE3D</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWTEXTURE3D</unmanaged-short>
        RWTexture3D = unchecked ((System.Int32)(44)),
        /// <summary>
        /// <dd> <p>The variable is a read-and-write buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWBUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWBUFFER</unmanaged-short>
        RWBuffer = unchecked ((System.Int32)(45)),
        /// <summary>
        /// <dd> <p>The variable is a byte-address buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_BYTEADDRESS_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_BYTEADDRESS_BUFFER</unmanaged-short>
        ByteAddressBuffer = unchecked ((System.Int32)(46)),
        /// <summary>
        /// <dd> <p>The variable is a read-and-write byte-address buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWBYTEADDRESS_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWBYTEADDRESS_BUFFER</unmanaged-short>
        RWByteAddressBuffer = unchecked ((System.Int32)(47)),
        /// <summary>
        /// <dd> <p>The variable is a structured buffer. </p> <p> For more information about structured buffer, see the <strong>Remarks</strong> section. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_STRUCTURED_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_STRUCTURED_BUFFER</unmanaged-short>
        StructuredBuffer = unchecked ((System.Int32)(48)),
        /// <summary>
        /// <dd> <p>The variable is a read-and-write structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_RWSTRUCTURED_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_RWSTRUCTURED_BUFFER</unmanaged-short>
        RWStructuredBuffer = unchecked ((System.Int32)(49)),
        /// <summary>
        /// <dd> <p>The variable is an append structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_APPEND_STRUCTURED_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_APPEND_STRUCTURED_BUFFER</unmanaged-short>
        AppendStructuredBuffer = unchecked ((System.Int32)(50)),
        /// <summary>
        /// <dd> <p>The variable is a consume structured buffer.</p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_CONSUME_STRUCTURED_BUFFER</unmanaged>
        /// <unmanaged-short>D3D_SVT_CONSUME_STRUCTURED_BUFFER</unmanaged-short>
        ConsumeStructuredBuffer = unchecked ((System.Int32)(51)),
        /// <summary>
        /// <dd> <p> The variable is an 8-byte FLOAT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN8FLOAT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN8FLOAT</unmanaged-short>
        MinimumFloat8 = unchecked ((System.Int32)(52)),
        /// <summary>
        /// <dd> <p> The variable is a 10-byte FLOAT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN10FLOAT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN10FLOAT</unmanaged-short>
        MinimumFloat10 = unchecked ((System.Int32)(53)),
        /// <summary>
        /// <dd> <p> The variable is a 16-byte FLOAT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN16FLOAT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN16FLOAT</unmanaged-short>
        MinimumFloat16 = unchecked ((System.Int32)(54)),
        /// <summary>
        /// <dd> <p> The variable is a 12-byte INT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN12INT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN12INT</unmanaged-short>
        MinimumInt12 = unchecked ((System.Int32)(55)),
        /// <summary>
        /// <dd> <p> The variable is a 16-byte INT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN16INT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN16INT</unmanaged-short>
        MinimumInt16 = unchecked ((System.Int32)(56)),
        /// <summary>
        /// <dd> <p> The variable is a 16-byte INT. </p> </dd>
        /// </summary>
        /// <doc-id>ff728735</doc-id>
        /// <unmanaged>D3D_SVT_MIN16UINT</unmanaged>
        /// <unmanaged-short>D3D_SVT_MIN16UINT</unmanaged-short>
        MinimumUInt16 = unchecked ((System.Int32)(57))}

    /// <summary>
    /// <p>Indicates shader type.</p>
    /// </summary>
    /// <doc-id>ff476214</doc-id>
    /// <unmanaged>D3D11_SHADER_VERSION_TYPE</unmanaged>
    /// <unmanaged-short>D3D11_SHADER_VERSION_TYPE</unmanaged-short>
    public enum ShaderVersion : System.Int32
    {
        /// <summary>
        /// <dd> <p>Pixel shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_PIXEL_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_PIXEL_SHADER</unmanaged-short>
        PixelShader = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Vertex shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_VERTEX_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_VERTEX_SHADER</unmanaged-short>
        VertexShader = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Geometry shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_GEOMETRY_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_GEOMETRY_SHADER</unmanaged-short>
        GeometryShader = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Hull shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_HULL_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_HULL_SHADER</unmanaged-short>
        HullShader = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Domain shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_DOMAIN_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_DOMAIN_SHADER</unmanaged-short>
        DomainShader = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>Compute shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_COMPUTE_SHADER</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_COMPUTE_SHADER</unmanaged-short>
        ComputeShader = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>Indicates the end of the enumeration constants.</p> </dd>
        /// </summary>
        /// <doc-id>ff476214</doc-id>
        /// <unmanaged>D3D11_SHVER_RESERVED0</unmanaged>
        /// <unmanaged-short>D3D11_SHVER_RESERVED0</unmanaged-short>
        Reserved0 = unchecked ((System.Int32)(65520))}

    [System.FlagsAttribute]
    /// <summary>
    /// <p>Strip flag options.</p>
    /// </summary>
    /// <remarks>
    /// <p>These flags are used by <strong>D3DStripShader</strong>.</p>
    /// </remarks>
    /// <doc-id>dd607325</doc-id>
    /// <unmanaged>D3DCOMPILER_STRIP_FLAGS</unmanaged>
    /// <unmanaged-short>D3DCOMPILER_STRIP_FLAGS</unmanaged-short>
    public enum StripFlags : System.Int32
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd607325</doc-id>
        /// <unmanaged>D3DCOMPILER_STRIP_REFLECTION_DATA</unmanaged>
        /// <unmanaged-short>D3DCOMPILER_STRIP_REFLECTION_DATA</unmanaged-short>
        CompilerStripReflectionData = unchecked ((System.Int32)(1)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd607325</doc-id>
        /// <unmanaged>D3DCOMPILER_STRIP_DEBUG_INFO</unmanaged>
        /// <unmanaged-short>D3DCOMPILER_STRIP_DEBUG_INFO</unmanaged-short>
        CompilerStripDebugInformation = unchecked ((System.Int32)(2)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd607325</doc-id>
        /// <unmanaged>D3DCOMPILER_STRIP_TEST_BLOBS</unmanaged>
        /// <unmanaged-short>D3DCOMPILER_STRIP_TEST_BLOBS</unmanaged-short>
        CompilerStripTestBlobs = unchecked ((System.Int32)(4)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd607325</doc-id>
        /// <unmanaged>D3DCOMPILER_STRIP_PRIVATE_DATA</unmanaged>
        /// <unmanaged-short>D3DCOMPILER_STRIP_PRIVATE_DATA</unmanaged-short>
        CompilerStripPrivateData = unchecked ((System.Int32)(8)),
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>dd607325</doc-id>
        /// <unmanaged>D3DCOMPILER_STRIP_ROOT_SIGNATURE</unmanaged>
        /// <unmanaged-short>D3DCOMPILER_STRIP_ROOT_SIGNATURE</unmanaged-short>
        CompilerStripRootSignature = unchecked ((System.Int32)(16)),
        /// <summary>
        /// None
        /// </summary>
        /// <unmanaged>None</unmanaged>
        /// <unmanaged-short>None</unmanaged-short>
        None = unchecked ((System.Int32)(0))}

    /// <summary>
    /// <p>Values that identify shader parameters that use system-value semantics.</p>
    /// </summary>
    /// <remarks>
    /// <p> The <strong><see cref = "SharpDX.D3DCompiler.SystemValueType"/></strong> values identify shader parameters that have predefined system-value semantics. These values are used in a shader-signature description. For more information about shader-signature description, see <strong><see cref = "SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>. </p>
    /// </remarks>
    /// <doc-id>ff728724</doc-id>
    /// <unmanaged>D3D_NAME</unmanaged>
    /// <unmanaged-short>D3D_NAME</unmanaged-short>
    public enum SystemValueType : System.Int32
    {
        /// <summary>
        /// <dd> <p>This parameter does not use a predefined system-value semantic.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_NAME_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>This parameter contains position data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_POSITION</unmanaged>
        /// <unmanaged-short>D3D_NAME_POSITION</unmanaged-short>
        Position = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>This parameter contains clip-distance data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_CLIP_DISTANCE</unmanaged>
        /// <unmanaged-short>D3D_NAME_CLIP_DISTANCE</unmanaged-short>
        ClipDistance = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>This parameter contains cull-distance data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_CULL_DISTANCE</unmanaged>
        /// <unmanaged-short>D3D_NAME_CULL_DISTANCE</unmanaged-short>
        CullDistance = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>This parameter contains a render-target-array index.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_RENDER_TARGET_ARRAY_INDEX</unmanaged>
        /// <unmanaged-short>D3D_NAME_RENDER_TARGET_ARRAY_INDEX</unmanaged-short>
        RenderTargetArrayIndex = unchecked ((System.Int32)(4)),
        /// <summary>
        /// <dd> <p>This parameter contains a viewport-array index.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_VIEWPORT_ARRAY_INDEX</unmanaged>
        /// <unmanaged-short>D3D_NAME_VIEWPORT_ARRAY_INDEX</unmanaged-short>
        ViewportArrayIndex = unchecked ((System.Int32)(5)),
        /// <summary>
        /// <dd> <p>This parameter contains a vertex ID.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_VERTEX_ID</unmanaged>
        /// <unmanaged-short>D3D_NAME_VERTEX_ID</unmanaged-short>
        VertexId = unchecked ((System.Int32)(6)),
        /// <summary>
        /// <dd> <p>This parameter contains a primitive ID.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_PRIMITIVE_ID</unmanaged>
        /// <unmanaged-short>D3D_NAME_PRIMITIVE_ID</unmanaged-short>
        PrimitiveId = unchecked ((System.Int32)(7)),
        /// <summary>
        /// <dd> <p>This parameter contains an instance ID.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_INSTANCE_ID</unmanaged>
        /// <unmanaged-short>D3D_NAME_INSTANCE_ID</unmanaged-short>
        InstanceId = unchecked ((System.Int32)(8)),
        /// <summary>
        /// <dd> <p>This parameter contains data that identifies whether or not the primitive faces the camera.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_IS_FRONT_FACE</unmanaged>
        /// <unmanaged-short>D3D_NAME_IS_FRONT_FACE</unmanaged-short>
        IsFrontFace = unchecked ((System.Int32)(9)),
        /// <summary>
        /// <dd> <p>This parameter contains a sampler-array index.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_SAMPLE_INDEX</unmanaged>
        /// <unmanaged-short>D3D_NAME_SAMPLE_INDEX</unmanaged-short>
        SampleIndex = unchecked ((System.Int32)(10)),
        /// <summary>
        /// <dd> <p>This parameter contains one of four tessellation factors that correspond to the amount of parts that a quad patch is broken into along the given edge. This flag is used to tessellate a quad patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR</unmanaged-short>
        FinalQuadEdgeTessfactor = unchecked ((System.Int32)(11)),
        /// <summary>
        /// <dd> <p>This parameter contains one of two tessellation factors that correspond to the amount of parts that a quad patch is broken into vertically and horizontally within the patch. This flag is used to tessellate a quad patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR</unmanaged-short>
        FinalQuadInsideTessfactor = unchecked ((System.Int32)(12)),
        /// <summary>
        /// <dd> <p>This parameter contains one of three tessellation factors that correspond to the amount of parts that a tri patch is broken into along the given edge. This flag is used to tessellate a tri patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR</unmanaged-short>
        FinalTriEdgeTessfactor = unchecked ((System.Int32)(13)),
        /// <summary>
        /// <dd> <p>This parameter contains the tessellation factor that corresponds to the amount of parts that a tri patch is broken into within the patch. This flag is used to tessellate a tri patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR</unmanaged-short>
        FinalTriInsideTessfactor = unchecked ((System.Int32)(14)),
        /// <summary>
        /// <dd> <p>This parameter contains the tessellation factor that corresponds to the number of lines broken into within the patch. This flag is used to tessellate an isolines patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR</unmanaged-short>
        FinalLineDetailTessfactor = unchecked ((System.Int32)(15)),
        /// <summary>
        /// <dd> <p>This parameter contains the tessellation factor that corresponds to the number of lines that are created within the patch. This flag is used to tessellate an isolines patch.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR</unmanaged>
        /// <unmanaged-short>D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR</unmanaged-short>
        FinalLineDensityTessfactor = unchecked ((System.Int32)(16)),
        /// <summary>
        /// <dd> <p>This parameter contains render-target data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_BARYCENTRICS</unmanaged>
        /// <unmanaged-short>D3D_NAME_BARYCENTRICS</unmanaged-short>
        Barycentrics = unchecked ((System.Int32)(23)),
        /// <summary>
        /// <dd> <p>This parameter contains render-target data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_TARGET</unmanaged>
        /// <unmanaged-short>D3D_NAME_TARGET</unmanaged-short>
        Target = unchecked ((System.Int32)(64)),
        /// <summary>
        /// <dd> <p>This parameter contains depth data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_DEPTH</unmanaged>
        /// <unmanaged-short>D3D_NAME_DEPTH</unmanaged-short>
        Depth = unchecked ((System.Int32)(65)),
        /// <summary>
        /// <dd> <p>This parameter contains alpha-coverage data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_COVERAGE</unmanaged>
        /// <unmanaged-short>D3D_NAME_COVERAGE</unmanaged-short>
        Coverage = unchecked ((System.Int32)(66)),
        /// <summary>
        /// <dd> <p>This parameter signifies that the value is greater than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_DEPTH_GREATER_EQUAL</unmanaged>
        /// <unmanaged-short>D3D_NAME_DEPTH_GREATER_EQUAL</unmanaged-short>
        DepthGreaterEqual = unchecked ((System.Int32)(67)),
        /// <summary>
        /// <dd> <p>This parameter signifies that the value is less than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader.</p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_DEPTH_LESS_EQUAL</unmanaged>
        /// <unmanaged-short>D3D_NAME_DEPTH_LESS_EQUAL</unmanaged-short>
        DepthLessEqual = unchecked ((System.Int32)(68)),
        /// <summary>
        /// <dd> <p> This parameter contains a stencil reference. See Shader Specified Stencil Reference Value. </p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_STENCIL_REF</unmanaged>
        /// <unmanaged-short>D3D_NAME_STENCIL_REF</unmanaged-short>
        StencilRef = unchecked ((System.Int32)(69)),
        /// <summary>
        /// <dd> <p> This parameter contains inner input coverage data. See Conservative Rasterization. </p> </dd>
        /// </summary>
        /// <doc-id>ff728724</doc-id>
        /// <unmanaged>D3D_NAME_INNER_COVERAGE</unmanaged>
        /// <unmanaged-short>D3D_NAME_INNER_COVERAGE</unmanaged-short>
        InnerCoverage = unchecked ((System.Int32)(70))}

    /// <summary>
    /// <p>Values that identify domain options for tessellator data.</p>
    /// </summary>
    /// <remarks>
    /// <p>The data domain defines the type of data. This enumeration is used by <strong><see cref = "SharpDX.D3DCompiler.ShaderDescription"/></strong>.</p>
    /// </remarks>
    /// <doc-id>ff728737</doc-id>
    /// <unmanaged>D3D_TESSELLATOR_DOMAIN</unmanaged>
    /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN</unmanaged-short>
    public enum TessellatorDomain : System.Int32
    {
        /// <summary>
        /// <dd> <p>The data type is undefined.</p> </dd>
        /// </summary>
        /// <doc-id>ff728737</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Isoline data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728737</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_ISOLINE</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN_ISOLINE</unmanaged-short>
        Isoline = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Triangle data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728737</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_TRI</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN_TRI</unmanaged-short>
        Triangle = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Quad data.</p> </dd>
        /// </summary>
        /// <doc-id>ff728737</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_QUAD</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN_QUAD</unmanaged-short>
        Quad = unchecked ((System.Int32)(3))}

    /// <summary>
    /// <p>Values that identify output primitive types.</p>
    /// </summary>
    /// <remarks>
    /// <p>The output primitive type determines how the tessellator output data is organized; this enumeration is used by <strong><see cref = "SharpDX.D3DCompiler.ShaderDescription"/></strong>.</p>
    /// </remarks>
    /// <doc-id>ff728738</doc-id>
    /// <unmanaged>D3D_TESSELLATOR_OUTPUT_PRIMITIVE</unmanaged>
    /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_PRIMITIVE</unmanaged-short>
    public enum TessellatorOutputPrimitive : System.Int32
    {
        /// <summary>
        /// <dd> <p>The output primitive type is undefined.</p> </dd>
        /// </summary>
        /// <doc-id>ff728738</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>The output primitive type is a point.</p> </dd>
        /// </summary>
        /// <doc-id>ff728738</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_POINT</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_POINT</unmanaged-short>
        Point = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>The output primitive type is a line.</p> </dd>
        /// </summary>
        /// <doc-id>ff728738</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_LINE</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_LINE</unmanaged-short>
        Line = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>The output primitive type is a clockwise triangle.</p> </dd>
        /// </summary>
        /// <doc-id>ff728738</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW</unmanaged-short>
        TriangleClockwise = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>The output primitive type is a counter clockwise triangle.</p> </dd>
        /// </summary>
        /// <doc-id>ff728738</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW</unmanaged-short>
        TriangleCounterclockwise = unchecked ((System.Int32)(4))}

    /// <summary>
    /// <p>Values that identify partitioning options.</p>
    /// </summary>
    /// <remarks>
    /// <p>During tessellation, the partition option helps to determine how the algorithm chooses the next partition value; this enumeration is used by <strong><see cref = "SharpDX.D3DCompiler.ShaderDescription"/></strong>.</p>
    /// </remarks>
    /// <doc-id>ff728739</doc-id>
    /// <unmanaged>D3D_TESSELLATOR_PARTITIONING</unmanaged>
    /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING</unmanaged-short>
    public enum TessellatorPartitioning : System.Int32
    {
        /// <summary>
        /// <dd> <p>The partitioning type is undefined.</p> </dd>
        /// </summary>
        /// <doc-id>ff728739</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_UNDEFINED</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING_UNDEFINED</unmanaged-short>
        Undefined = unchecked ((System.Int32)(0)),
        /// <summary>
        /// <dd> <p>Partition with integers only.</p> </dd>
        /// </summary>
        /// <doc-id>ff728739</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_INTEGER</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING_INTEGER</unmanaged-short>
        Integer = unchecked ((System.Int32)(1)),
        /// <summary>
        /// <dd> <p>Partition with a power-of-two number only.</p> </dd>
        /// </summary>
        /// <doc-id>ff728739</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_POW2</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING_POW2</unmanaged-short>
        PowerOfTwo = unchecked ((System.Int32)(2)),
        /// <summary>
        /// <dd> <p>Partition with an odd, fractional number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728739</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD</unmanaged-short>
        FractionalOdd = unchecked ((System.Int32)(3)),
        /// <summary>
        /// <dd> <p>Partition with an even, fractional number.</p> </dd>
        /// </summary>
        /// <doc-id>ff728739</doc-id>
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN</unmanaged>
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN</unmanaged-short>
        FractionalEven = unchecked ((System.Int32)(4))}
}