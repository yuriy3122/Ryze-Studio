// <auto-generated/>

namespace SharpDX.RawInput
{
    /// <summary>
    /// Functions
    /// </summary>
    static partial class RawInputFunctions
    {
        /// <summary>
        /// <p>Retrieves the raw input from the specified device.</p>
        /// </summary>
        /// <param name = "hRawInput"><dd>  <p>A handle to the <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure. This comes from the  <em>lParam</em> in <strong>WM_INPUT</strong>. </p> </dd></param>
        /// <param name = "uiCommand"><dd>  <p>The command flag. This parameter can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RID_HEADER</strong></dt> <dt>0x10000005</dt> </dl> </td><td> <p>Get the header information from the <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure.</p> </td></tr> <tr><td><dl> <dt><strong>RID_INPUT</strong></dt> <dt>0x10000003</dt> </dl> </td><td> <p>Get the raw data from the <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dataRef"><dd>  <p>A reference to the data that comes from the <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure. This depends on the value of  <em>uiCommand</em>. If  <em>pData</em> is <strong><c>null</c></strong>, the required size of the buffer is returned in *<em>pcbSize</em>. </p> </dd></param>
        /// <param name = "cbSizeRef"><dd>  <p>The size, in bytes, of the data in  <em>pData</em>. </p> </dd></param>
        /// <param name = "cbSizeHeader"><dd>  <p>The size, in bytes, of the <strong><see cref = "SharpDX.RawInput.RawInputHeader"/></strong> structure. </p> </dd></param>
        /// <returns><p>If  <em>pData</em> is <strong><c>null</c></strong> and the function is successful, the return value is 0. If  <em>pData</em> is not <strong><c>null</c></strong> and the function is successful, the return value is the number of bytes copied into pData.</p><p>If there is an error, the return value is (<strong>UINT</strong>)-1.</p></returns>
        /// <remarks>
        /// <p><strong>GetRawInputData</strong> gets the raw input one <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure at a time. In contrast, <strong>GetRawInputBuffer</strong> gets an array of <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structures.</p>
        /// </remarks>
        /// <doc-id>ms645596</doc-id>
        /// <unmanaged>unsigned int GetRawInputData([In] HRAWINPUT hRawInput,[In] unsigned int uiCommand,[Out, Buffer, Optional] void* pData,[InOut] unsigned int* pcbSize,[In] unsigned int cbSizeHeader)</unmanaged>
        /// <unmanaged-short>GetRawInputData</unmanaged-short>
        public static unsafe System.Int32 GetRawInputData(System.IntPtr hRawInput, SharpDX.RawInput.RawInputDataType uiCommand, System.IntPtr dataRef, ref System.Int32 cbSizeRef, System.Int32 cbSizeHeader)
        {
            System.Int32 __result__;
            fixed (void *cbSizeRef_ = &cbSizeRef)
                __result__ = GetRawInputData_((void *)hRawInput, unchecked ((System.Int32)uiCommand), (void *)dataRef, cbSizeRef_, cbSizeHeader);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetRawInputData", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int GetRawInputData_(void *param0, int param1, void *param2, void *param3, int param4);
        /// <summary>
        /// <p>Retrieves information about the raw input device.</p>
        /// </summary>
        /// <param name = "hDevice"><dd>  <p>A handle to the raw input device. This comes from the <strong>hDevice</strong> member of <strong><see cref = "SharpDX.RawInput.RawInputHeader"/></strong> or from <strong>GetRawInputDeviceList</strong>. </p> </dd></param>
        /// <param name = "uiCommand"><dd>  <p>Specifies what data will be returned in  <em>pData</em>. This parameter can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RIDI_DEVICENAME</strong></dt> <dt>0x20000007</dt> </dl> </td><td> <p><em>pData</em> points to a string that contains the device name. </p> <p>For this  <em>uiCommand</em> only, the value in  <em>pcbSize</em> is the character count (not the byte count).</p> </td></tr> <tr><td><dl> <dt><strong>RIDI_DEVICEINFO</strong></dt> <dt>0x2000000b</dt> </dl> </td><td> <p><em>pData</em> points to an <strong><see cref = "SharpDX.RawInput.RawDeviceInformation"/></strong> structure.</p> </td></tr> <tr><td><dl> <dt><strong>RIDI_PREPARSEDDATA</strong></dt> <dt>0x20000005</dt> </dl> </td><td> <p><em>pData</em> points to the previously parsed data.</p> </td></tr> </table> <p>?</p> </dd></param>
        /// <param name = "dataRef"><dd>  <p>A reference to a buffer that contains the information specified by  <em>uiCommand</em>. If  <em>uiCommand</em> is <strong>RIDI_DEVICEINFO</strong>, set the <strong>cbSize</strong> member of <strong><see cref = "SharpDX.RawInput.RawDeviceInformation"/></strong> to <code>sizeof(<see cref = "SharpDX.RawInput.RawDeviceInformation"/>)</code> before calling <strong>GetRawInputDeviceInfo</strong>. </p> </dd></param>
        /// <param name = "cbSizeRef"><dd>  <p>The size, in bytes, of the data in  <em>pData</em>. </p> </dd></param>
        /// <returns><p>If successful, this function returns a non-negative number indicating the number of bytes copied to  <em>pData</em>. </p><p>If  <em>pData</em> is not large enough for the data, the function returns -1. If  <em>pData</em> is <strong><c>null</c></strong>, the function returns a value of zero. In both of these cases,  <em>pcbSize</em> is set to the minimum size required for the  <em>pData</em> buffer.</p><p>Call <strong>GetLastError</strong> to identify any other errors.</p></returns>
        /// <doc-id>ms645597</doc-id>
        /// <unmanaged>unsigned int GetRawInputDeviceInfoW([In, Optional] void* hDevice,[In] unsigned int uiCommand,[Out, Buffer, Optional] void* pData,[InOut] unsigned int* pcbSize)</unmanaged>
        /// <unmanaged-short>GetRawInputDeviceInfoW</unmanaged-short>
        public static unsafe System.Int32 GetRawInputDeviceInfo(System.IntPtr hDevice, SharpDX.RawInput.RawInputDeviceInfoType uiCommand, System.IntPtr dataRef, ref System.Int32 cbSizeRef)
        {
            System.Int32 __result__;
            fixed (void *cbSizeRef_ = &cbSizeRef)
                __result__ = GetRawInputDeviceInfoW_((void *)hDevice, unchecked ((System.Int32)uiCommand), (void *)dataRef, cbSizeRef_);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetRawInputDeviceInfoW", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int GetRawInputDeviceInfoW_(void *param0, int param1, void *param2, void *param3);
        /// <summary>
        /// <p>Performs a buffered read of the raw input data.</p>
        /// </summary>
        /// <param name = "dataRef"><dd>  <p>A reference to a buffer of <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structures that contain the raw input data. If <strong><c>null</c></strong>, the minimum required buffer, in bytes, is returned in *<em>pcbSize</em>. </p> </dd></param>
        /// <param name = "cbSizeRef"><dd>  <p>The size, in bytes, of a <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure. </p> </dd></param>
        /// <param name = "cbSizeHeader"><dd>  <p>The size, in bytes, of the <strong><see cref = "SharpDX.RawInput.RawInputHeader"/></strong> structure. </p> </dd></param>
        /// <returns><p>If  <em>pData</em> is <c>null</c> and the function is successful, the return value is zero. If  <em>pData</em> is not <c>null</c> and the function is successful, the return value is the number of <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structures written to  <em>pData</em>.</p><p>If an error occurs, the return value is (<strong>UINT</strong>)-1. Call <strong>GetLastError</strong> for the error code.</p></returns>
        /// <remarks>
        /// <p>Using <strong>GetRawInputBuffer</strong>, the raw input data is buffered in the array of <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structures. For an unbuffered read, use the <strong>GetMessage</strong> function to read in the raw input data. </p><p>The <strong>NEXTRAWINPUTBLOCK</strong> macro allows an application to traverse an array of <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structures.</p><strong>Note</strong>??To get the correct size of the raw input buffer, do not use *<em>pcbSize</em>, use *<em>pcbSize</em> * 8 instead.   To ensure <strong>GetRawInputBuffer</strong> behaves properly on WOW64, you must align the <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> structure by 8 bytes. The following code shows how to align <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> for WOW64.   <pre>[StructLayout(LayoutKind.Explicit)]
        /// internal struct <see cref = "SharpDX.RawInput.RawInput"/>
        /// { [FieldOffset(0)] public <see cref = "SharpDX.RawInput.RawInputHeader"/> header; [FieldOffset(16+8)] public <see cref = "SharpDX.RawInput.RawMouse"/> mouse; [FieldOffset(16+8)] public <see cref = "SharpDX.RawInput.RawKeyboard"/> keyboard; [FieldOffset(16+8)] public <see cref = "SharpDX.RawInput.RawHid"/> hid;
        /// }
        /// </pre>?
        /// </remarks>
        /// <doc-id>ms645595</doc-id>
        /// <unmanaged>unsigned int GetRawInputBuffer([Out, Buffer, Optional] RAWINPUT* pData,[InOut] unsigned int* pcbSize,[In] unsigned int cbSizeHeader)</unmanaged>
        /// <unmanaged-short>GetRawInputBuffer</unmanaged-short>
        public static unsafe System.Int32 GetRawInputBuffer(SharpDX.RawInput.RawInput[] dataRef, ref System.Int32 cbSizeRef, System.Int32 cbSizeHeader)
        {
            SharpDX.RawInput.RawInput.__Native[] dataRef_ = dataRef == null ? null : new SharpDX.RawInput.RawInput.__Native[dataRef.Length];
            System.Int32 __result__;
            fixed (void *cbSizeRef_ = &cbSizeRef)
                fixed (void *_dataRef = dataRef_)
                    __result__ = GetRawInputBuffer_(_dataRef, cbSizeRef_, cbSizeHeader);
            if (dataRef != null)
                for (int i = 0; i < dataRef.Length; ++i)
                    if (dataRef != null)
                        dataRef[i].__MarshalFrom(ref (dataRef_)[i]);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetRawInputBuffer", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int GetRawInputBuffer_(void *param0, void *param1, int param2);
        /// <summary>
        /// <p>Registers the devices that supply the raw input data.</p>
        /// </summary>
        /// <param name = "rawInputDevicesRef"><dd>  <p>An array of <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structures that represent the devices that supply the raw input.</p> </dd></param>
        /// <param name = "uiNumDevices"><dd>  <p>The number of <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structures pointed to by <em>pRawInputDevices</em>.</p> </dd></param>
        /// <param name = "cbSize"><dd>  <p>The size, in bytes, of a <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structure.</p> </dd></param>
        /// <returns><p><strong>TRUE</strong> if the function succeeds; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. If the function fails, call <strong>GetLastError</strong> for more information.</p></returns>
        /// <remarks>
        /// <p>To receive <strong>WM_INPUT</strong> messages, an application must first register the raw input devices using <strong>RegisterRawInputDevices</strong>. By default, an application does not receive raw input.</p><p>To receive <strong>WM_INPUT_DEVICE_CHANGE</strong> messages, an application must specify the  RIDEV_DEVNOTIFY flag for each device class that is specified by the usUsagePage and usUsage fields of the  <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structure  .  By default, an application does not receive  <strong>WM_INPUT_DEVICE_CHANGE</strong> notifications for raw input device arrival and removal.</p><p>If a <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structure has the RIDEV_REMOVE flag set and the hwndTarget parameter is not set to <c>null</c>, then parameter validation will fail. </p>
        /// </remarks>
        /// <doc-id>ms645600</doc-id>
        /// <unmanaged>BOOL RegisterRawInputDevices([In, Buffer] const RAWINPUTDEVICE* pRawInputDevices,[In] unsigned int uiNumDevices,[In] unsigned int cbSize)</unmanaged>
        /// <unmanaged-short>RegisterRawInputDevices</unmanaged-short>
        public static unsafe SharpDX.Mathematics.Interop.RawBool RegisterRawInputDevices(SharpDX.RawInput.RawInputDevice[] rawInputDevicesRef, System.Int32 uiNumDevices, System.Int32 cbSize)
        {
            SharpDX.Mathematics.Interop.RawBool __result__;
            fixed (void *rawInputDevicesRef_ = rawInputDevicesRef)
                __result__ = RegisterRawInputDevices_(rawInputDevicesRef_, uiNumDevices, cbSize);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "RegisterRawInputDevices", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern SharpDX.Mathematics.Interop.RawBool RegisterRawInputDevices_(void *param0, int param1, int param2);
        /// <summary>
        /// <p>Retrieves the information about the raw input devices for the current application.</p>
        /// </summary>
        /// <param name = "rawInputDevicesRef"><dd>  <p>An array of <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structures for the application. </p> </dd></param>
        /// <param name = "uiNumDevicesRef"><dd>  <p>The number of <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structures in *<em>pRawInputDevices</em>. </p> </dd></param>
        /// <param name = "cbSize"><dd>  <p>The size, in bytes, of a <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structure. </p> </dd></param>
        /// <returns><p>If successful, the function returns a non-negative number that is the number of <strong><see cref = "SharpDX.RawInput.RawInputDevice"/></strong> structures written to the buffer. </p><p>If the <em>pRawInputDevices</em> buffer is too small or <strong><c>null</c></strong>, the function sets the last error as <strong>ERROR_INSUFFICIENT_BUFFER</strong>, returns -1, and sets <em>puiNumDevices</em> to the required number of devices. If the function fails for any other reason, it returns -1. For more details, call <strong>GetLastError</strong>. </p></returns>
        /// <remarks>
        /// <p>To receive raw input from a device, an application must register it by using <strong>RegisterRawInputDevices</strong>. </p>
        /// </remarks>
        /// <doc-id>ms645599</doc-id>
        /// <unmanaged>unsigned int GetRegisteredRawInputDevices([Out, Buffer, Optional] RAWINPUTDEVICE* pRawInputDevices,[InOut] unsigned int* puiNumDevices,[In] unsigned int cbSize)</unmanaged>
        /// <unmanaged-short>GetRegisteredRawInputDevices</unmanaged-short>
        public static unsafe System.Int32 GetRegisteredRawInputDevices(SharpDX.RawInput.RawInputDevice[] rawInputDevicesRef, ref System.Int32 uiNumDevicesRef, System.Int32 cbSize)
        {
            System.Int32 __result__;
            fixed (void *uiNumDevicesRef_ = &uiNumDevicesRef)
                fixed (void *rawInputDevicesRef_ = rawInputDevicesRef)
                    __result__ = GetRegisteredRawInputDevices_(rawInputDevicesRef_, uiNumDevicesRef_, cbSize);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetRegisteredRawInputDevices", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int GetRegisteredRawInputDevices_(void *param0, void *param1, int param2);
        /// <summary>
        /// <p>Enumerates the raw input devices attached to the system. </p>
        /// </summary>
        /// <param name = "rawInputDeviceListRef"><dd>  <p>An array of <strong><see cref = "SharpDX.RawInput.RawInputDevicelist"/></strong> structures for the devices attached to the system. If <strong><c>null</c></strong>, the number of devices are returned in *<em>puiNumDevices</em>. </p> </dd></param>
        /// <param name = "uiNumDevicesRef"><dd>  <p>If <em>pRawInputDeviceList</em> is <strong><c>null</c></strong>, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of <strong><see cref = "SharpDX.RawInput.RawInputDevicelist"/></strong> structures that can be contained in the buffer to which <em>pRawInputDeviceList</em> points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with <strong>ERROR_INSUFFICIENT_BUFFER</strong>.</p> </dd></param>
        /// <param name = "cbSize"><dd>  <p>The size of a <strong><see cref = "SharpDX.RawInput.RawInputDevicelist"/></strong> structure, in bytes.</p> </dd></param>
        /// <returns><p>If the function is successful, the return value is the number of devices stored in the buffer pointed to by  <em>pRawInputDeviceList</em>.</p><p>On any other error, the function returns (<strong>UINT</strong>) -1 and  <strong>GetLastError</strong> returns the error indication.</p></returns>
        /// <remarks>
        /// <p>The devices returned from this function are the mouse, the keyboard, and other Human Interface Device (HID) devices.</p><p>To get more detailed information about the attached devices, call <strong>GetRawInputDeviceInfo</strong> using the hDevice from <strong><see cref = "SharpDX.RawInput.RawInputDevicelist"/></strong>. </p>
        /// </remarks>
        /// <doc-id>ms645598</doc-id>
        /// <unmanaged>unsigned int GetRawInputDeviceList([Out, Buffer, Optional] RAWINPUTDEVICELIST* pRawInputDeviceList,[InOut] unsigned int* puiNumDevices,[In] unsigned int cbSize)</unmanaged>
        /// <unmanaged-short>GetRawInputDeviceList</unmanaged-short>
        public static unsafe System.Int32 GetRawInputDeviceList(SharpDX.RawInput.RawInputDevicelist[] rawInputDeviceListRef, ref System.Int32 uiNumDevicesRef, System.Int32 cbSize)
        {
            System.Int32 __result__;
            fixed (void *uiNumDevicesRef_ = &uiNumDevicesRef)
                fixed (void *rawInputDeviceListRef_ = rawInputDeviceListRef)
                    __result__ = GetRawInputDeviceList_(rawInputDeviceListRef_, uiNumDevicesRef_, cbSize);
            return __result__;
        }

        [System.Runtime.InteropServices.DllImportAttribute("user32.dll", EntryPoint = "GetRawInputDeviceList", CallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall)]
        private unsafe static extern int GetRawInputDeviceList_(void *param0, void *param1, int param2);
    }
}