// <auto-generated/>

namespace SharpDX.RawInput
{
    /// <summary>
    /// <p>Defines the raw input data coming from any device. </p>
    /// </summary>
    /// <doc-id>ms645581</doc-id>
    /// <unmanaged>RID_DEVICE_INFO</unmanaged>
    /// <unmanaged-short>RID_DEVICE_INFO</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawDeviceInformation
    {
        /// <summary>
        /// <dd> <p>The size, in bytes, of the <strong><see cref = "SharpDX.RawInput.RawDeviceInformation"/></strong> structure. </p> </dd>
        /// </summary>
        /// <doc-id>ms645581</doc-id>
        /// <unmanaged>cbSize</unmanaged>
        /// <unmanaged-short>cbSize</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(0)]
        public System.Int32 Size;
        /// <summary>
        /// <dd> <p>The type of raw input data. This member can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RIM_TYPEHID</strong></dt> <dt>2</dt> </dl> </td><td> <p>Data comes from an HID that is not a keyboard or a mouse.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEKEYBOARD</strong></dt> <dt>1</dt> </dl> </td><td> <p>Data comes from a keyboard.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEMOUSE</strong></dt> <dt>0</dt> </dl> </td><td> <p>Data comes from a mouse.</p> </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ms645581</doc-id>
        /// <unmanaged>dwType</unmanaged>
        /// <unmanaged-short>dwType</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(4)]
        public SharpDX.RawInput.DeviceType Type;
        /// <summary>
        /// <dd> <p>If <strong>dwType</strong> is <strong>RIM_TYPEMOUSE</strong>, this is the <strong><see cref = "SharpDX.RawInput.RawDeviceInformationMouse"/></strong> structure that defines the mouse. </p> </dd>
        /// </summary>
        /// <doc-id>ms645581</doc-id>
        /// <unmanaged>mouse</unmanaged>
        /// <unmanaged-short>mouse</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationMouse Mouse;
        /// <summary>
        /// <dd> <p>If <strong>dwType</strong> is <strong>RIM_TYPEKEYBOARD</strong>, this is the <strong><see cref = "SharpDX.RawInput.RawDeviceInformationKeyboard"/></strong> structure that defines the keyboard. </p> </dd>
        /// </summary>
        /// <doc-id>ms645581</doc-id>
        /// <unmanaged>keyboard</unmanaged>
        /// <unmanaged-short>keyboard</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationKeyboard Keyboard;
        /// <summary>
        /// <dd> <p>If <strong>dwType</strong> is <strong>RIM_TYPEHID</strong>, this is the <strong><see cref = "SharpDX.RawInput.RawDeviceInformationHid"/></strong> structure that defines the HID device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645581</doc-id>
        /// <unmanaged>hid</unmanaged>
        /// <unmanaged-short>hid</unmanaged-short>
        [System.Runtime.InteropServices.FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationHid Hid;
    }

    /// <summary>
    /// <p>Defines the raw input data coming from the specified Human Interface Device (HID). </p>
    /// </summary>
    /// <doc-id>ms645584</doc-id>
    /// <unmanaged>RID_DEVICE_INFO_HID</unmanaged>
    /// <unmanaged-short>RID_DEVICE_INFO_HID</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawDeviceInformationHid
    {
        /// <summary>
        /// <dd> <p>The vendor identifier for the HID. </p> </dd>
        /// </summary>
        /// <doc-id>ms645584</doc-id>
        /// <unmanaged>dwVendorId</unmanaged>
        /// <unmanaged-short>dwVendorId</unmanaged-short>
        public System.Int32 VendorId;
        /// <summary>
        /// <dd> <p>The product identifier for the HID. </p> </dd>
        /// </summary>
        /// <doc-id>ms645584</doc-id>
        /// <unmanaged>dwProductId</unmanaged>
        /// <unmanaged-short>dwProductId</unmanaged-short>
        public System.Int32 ProductId;
        /// <summary>
        /// <dd> <p>The version number for the HID. </p> </dd>
        /// </summary>
        /// <doc-id>ms645584</doc-id>
        /// <unmanaged>dwVersionNumber</unmanaged>
        /// <unmanaged-short>dwVersionNumber</unmanaged-short>
        public System.Int32 VersionNumber;
        /// <summary>
        /// <dd> <p>The top-level collection Usage Page for the device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645584</doc-id>
        /// <unmanaged>usUsagePage</unmanaged>
        /// <unmanaged-short>usUsagePage</unmanaged-short>
        public SharpDX.Multimedia.UsagePage UsagePage;
        /// <summary>
        /// <dd> <p>The top-level collection Usage for the device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645584</doc-id>
        /// <unmanaged>usUsage</unmanaged>
        /// <unmanaged-short>usUsage</unmanaged-short>
        public SharpDX.Multimedia.UsageId Usage;
    }

    /// <summary>
    /// <p>Defines the raw input data coming from the specified keyboard. </p>
    /// </summary>
    /// <remarks>
    /// <p>For the keyboard, the Usage Page is 1 and the Usage is 6. </p>
    /// </remarks>
    /// <doc-id>ms645587</doc-id>
    /// <unmanaged>RID_DEVICE_INFO_KEYBOARD</unmanaged>
    /// <unmanaged-short>RID_DEVICE_INFO_KEYBOARD</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawDeviceInformationKeyboard
    {
        /// <summary>
        /// <dd> <p>The type of the keyboard. </p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwType</unmanaged>
        /// <unmanaged-short>dwType</unmanaged-short>
        public System.Int32 Type;
        /// <summary>
        /// <dd> <p>The subtype of the keyboard. </p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwSubType</unmanaged>
        /// <unmanaged-short>dwSubType</unmanaged-short>
        public System.Int32 SubType;
        /// <summary>
        /// <dd> <p>The  scan code mode. </p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwKeyboardMode</unmanaged>
        /// <unmanaged-short>dwKeyboardMode</unmanaged-short>
        public System.Int32 KeyboardMode;
        /// <summary>
        /// <dd> <p>The number of function keys on the keyboard.</p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwNumberOfFunctionKeys</unmanaged>
        /// <unmanaged-short>dwNumberOfFunctionKeys</unmanaged-short>
        public System.Int32 NumberOfFunctionKeys;
        /// <summary>
        /// <dd> <p>The number of LED indicators on the keyboard.</p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwNumberOfIndicators</unmanaged>
        /// <unmanaged-short>dwNumberOfIndicators</unmanaged-short>
        public System.Int32 NumberOfIndicators;
        /// <summary>
        /// <dd> <p>The total number of keys on the keyboard. </p> </dd>
        /// </summary>
        /// <doc-id>ms645587</doc-id>
        /// <unmanaged>dwNumberOfKeysTotal</unmanaged>
        /// <unmanaged-short>dwNumberOfKeysTotal</unmanaged-short>
        public System.Int32 NumberOfKeysTotal;
    }

    /// <summary>
    /// <p>Defines the raw input data coming from the specified mouse.</p>
    /// </summary>
    /// <remarks>
    /// <p>For the mouse, the Usage Page is 1 and the Usage is 2.</p>
    /// </remarks>
    /// <doc-id>ms645589</doc-id>
    /// <unmanaged>RID_DEVICE_INFO_MOUSE</unmanaged>
    /// <unmanaged-short>RID_DEVICE_INFO_MOUSE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawDeviceInformationMouse
    {
        /// <summary>
        /// <dd> <p>The identifier of the mouse device.</p> </dd>
        /// </summary>
        /// <doc-id>ms645589</doc-id>
        /// <unmanaged>dwId</unmanaged>
        /// <unmanaged-short>dwId</unmanaged-short>
        public System.Int32 Id;
        /// <summary>
        /// <dd> <p>The number of buttons for the mouse.</p> </dd>
        /// </summary>
        /// <doc-id>ms645589</doc-id>
        /// <unmanaged>dwNumberOfButtons</unmanaged>
        /// <unmanaged-short>dwNumberOfButtons</unmanaged-short>
        public System.Int32 NumberOfButtons;
        /// <summary>
        /// <dd> <p>The number of data points per second. This information may not be applicable for every mouse device.</p> </dd>
        /// </summary>
        /// <doc-id>ms645589</doc-id>
        /// <unmanaged>dwSampleRate</unmanaged>
        /// <unmanaged-short>dwSampleRate</unmanaged-short>
        public System.Int32 SampleRate;
        /// <summary>
        /// <dd> <p><strong>TRUE</strong> if the mouse has a wheel for horizontal scrolling; otherwise, <strong><see cref = "SharpDX.Result.False"/></strong>. </p> <p><strong>Windows?XP:??</strong>This member is only supported starting with Windows?Vista.</p> </dd>
        /// </summary>
        /// <doc-id>ms645589</doc-id>
        /// <unmanaged>fHasHorizontalWheel</unmanaged>
        /// <unmanaged-short>fHasHorizontalWheel</unmanaged-short>
        public SharpDX.Mathematics.Interop.RawBool HasHorizontalWheel;
    }

    /// <summary>
    /// <p>Describes the format of the raw input from a Human Interface Device (HID). </p>
    /// </summary>
    /// <remarks>
    /// <p>Each <strong>WM_INPUT</strong> can indicate several inputs, but all of the inputs come from the same HID. The size of the <strong>bRawData</strong> array is <strong>dwSizeHid</strong> *	<strong>dwCount</strong>.</p>
    /// </remarks>
    /// <doc-id>ms645549</doc-id>
    /// <unmanaged>RAWHID</unmanaged>
    /// <unmanaged-short>RAWHID</unmanaged-short>
    internal partial struct RawHid
    {
        /// <summary>
        /// <dd> <p>The size, in bytes, of each HID input in <strong>bRawData</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>ms645549</doc-id>
        /// <unmanaged>dwSizeHid</unmanaged>
        /// <unmanaged-short>dwSizeHid</unmanaged-short>
        public System.Int32 SizeHid;
        /// <summary>
        /// <dd> <p>The number of HID inputs in <strong>bRawData</strong>.</p> </dd>
        /// </summary>
        /// <doc-id>ms645549</doc-id>
        /// <unmanaged>dwCount</unmanaged>
        /// <unmanaged-short>dwCount</unmanaged-short>
        public System.Int32 Count;
        /// <summary>
        /// <dd> <p>The raw input data, as an array of bytes. </p> </dd>
        /// </summary>
        /// <doc-id>ms645549</doc-id>
        /// <unmanaged>bRawData</unmanaged>
        /// <unmanaged-short>bRawData</unmanaged-short>
        public System.Int32 RawData;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public System.Int32 SizeHid;
            public System.Int32 Count;
            public System.Byte RawData;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            SizeHid = @ref.SizeHid;
            Count = @ref.Count;
            RawData = (System.Int32)@ref.RawData;
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SizeHid = SizeHid;
            @ref.Count = Count;
            @ref.RawData = (System.Byte)RawData;
        }
    }

    /// <summary>
    /// <p>This section describes how the system provides raw input to your application and how an application receives and processes that input. Raw input is sometimes referred to as generic input. </p>
    /// </summary>
    /// <doc-id>ms645536</doc-id>
    /// <unmanaged>RAWINPUT</unmanaged>
    /// <unmanaged-short>RAWINPUT</unmanaged-short>
    internal partial struct RawInput
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ms645536</doc-id>
        /// <unmanaged>header</unmanaged>
        /// <unmanaged-short>header</unmanaged-short>
        public SharpDX.RawInput.RawInputHeader Header;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <doc-id>ms645536</doc-id>
        /// <unmanaged>data</unmanaged>
        /// <unmanaged-short>data</unmanaged-short>
        public SharpDX.RawInput.RawInputInner0 Data;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            public SharpDX.RawInput.RawInputHeader Header;
            public SharpDX.RawInput.RawInputInner0.__Native Data;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            Data.__MarshalFree(ref @ref.Data);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Header = @ref.Header;
            Data.__MarshalFrom(ref @ref.Data);
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Header = Header;
            Data.__MarshalTo(ref @ref.Data);
        }
    }

    /// <summary>
    /// <p>Defines information for the raw input devices. </p>
    /// </summary>
    /// <remarks>
    /// <p>If <strong>RIDEV_NOLEGACY</strong> is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with <strong>RIDEV_NOLEGACY</strong>, <strong>WM_LBUTTONDOWN</strong> and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with <strong>RIDEV_NOLEGACY</strong>, <strong>WM_KEYDOWN</strong> and related legacy keyboard messages are not generated.</p><p>If <strong>RIDEV_REMOVE</strong> is set and the <strong>hwndTarget</strong> member is not set to <strong><c>null</c></strong>, then parameter validation will fail.</p>
    /// </remarks>
    /// <doc-id>ms645565</doc-id>
    /// <unmanaged>RAWINPUTDEVICE</unmanaged>
    /// <unmanaged-short>RAWINPUTDEVICE</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawInputDevice
    {
        /// <summary>
        /// <dd> <p>Top level collection Usage page for the raw input device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645565</doc-id>
        /// <unmanaged>usUsagePage</unmanaged>
        /// <unmanaged-short>usUsagePage</unmanaged-short>
        public System.Int16 UsagePage;
        /// <summary>
        /// <dd> <p>Top level collection Usage for the raw input device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645565</doc-id>
        /// <unmanaged>usUsage</unmanaged>
        /// <unmanaged-short>usUsage</unmanaged-short>
        public System.Int16 Usage;
        /// <summary>
        /// <dd> <p>Mode flag that specifies how to interpret the information provided by <strong>usUsagePage</strong> and <strong>usUsage</strong>. It can be zero (the default) or one of the following values. By default, the operating system sends raw input from devices with the specified top level collection (TLC) to the registered application as long as it has the window focus. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RIDEV_APPKEYS</strong></dt> <dt>0x00000400</dt> </dl> </td><td> <p>If set, the application command keys are handled. <strong>RIDEV_APPKEYS</strong> can be specified only if <strong>RIDEV_NOLEGACY</strong> is specified for a keyboard device.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_CAPTUREMOUSE</strong></dt> <dt>0x00000200</dt> </dl> </td><td> <p>If set, the mouse button click does not activate the other window.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_DEVNOTIFY</strong></dt> <dt>0x00002000</dt> </dl> </td><td> <p>If set, this enables the caller to receive <strong>WM_INPUT_DEVICE_CHANGE</strong> notifications for device arrival and device removal.</p> <p><strong>Windows?XP:??</strong>This flag is not supported until Windows?Vista</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_EXCLUDE</strong></dt> <dt>0x00000010</dt> </dl> </td><td> <p>If set, this specifies the top level collections to exclude when reading a complete usage page. This flag only affects a TLC whose usage page is already specified with <strong>RIDEV_PAGEONLY</strong>. </p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_EXINPUTSINK</strong></dt> <dt>0x00001000</dt> </dl> </td><td> <p>If set, this enables the caller to receive input in the background only if the foreground application does not process it. In other words, if the foreground application is not registered for raw input, then the background application that is registered will receive the input.</p> <p><strong>Windows?XP:??</strong>This flag is not supported until Windows?Vista</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_INPUTSINK</strong></dt> <dt>0x00000100</dt> </dl> </td><td> <p>If set, this enables the caller to receive the input even when the caller is not in the foreground.  Note that <strong>hwndTarget</strong> must be specified.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_NOHOTKEYS</strong></dt> <dt>0x00000200</dt> </dl> </td><td> <p>If set, the application-defined keyboard device hotkeys are not handled. However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled. By default, all keyboard hotkeys are handled. <strong>RIDEV_NOHOTKEYS</strong> can be specified even if <strong>RIDEV_NOLEGACY</strong> is not specified and <strong>hwndTarget</strong> is <strong><c>null</c></strong>.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_NOLEGACY</strong></dt> <dt>0x00000030</dt> </dl> </td><td> <p>If set, this prevents any devices specified by <strong>usUsagePage</strong> or <strong>usUsage</strong> from generating legacy messages. This is only for the mouse and keyboard. See Remarks.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_PAGEONLY</strong></dt> <dt>0x00000020</dt> </dl> </td><td> <p>If set, this specifies all devices whose top level collection is from the specified <strong>usUsagePage</strong>. Note that <strong>usUsage</strong> must be zero. To exclude a particular top level collection, use <strong>RIDEV_EXCLUDE</strong>.</p> </td></tr> <tr><td><dl> <dt><strong>RIDEV_REMOVE</strong></dt> <dt>0x00000001</dt> </dl> </td><td> <p>If set, this removes the top level collection from the inclusion list. This tells the operating system to stop reading from a device which matches the top level collection.</p> </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ms645565</doc-id>
        /// <unmanaged>dwFlags</unmanaged>
        /// <unmanaged-short>dwFlags</unmanaged-short>
        public System.Int32 Flags;
        /// <summary>
        /// <dd> <p>A handle to the target window. If <strong><c>null</c></strong> it follows the keyboard focus.</p> </dd>
        /// </summary>
        /// <doc-id>ms645565</doc-id>
        /// <unmanaged>hwndTarget</unmanaged>
        /// <unmanaged-short>hwndTarget</unmanaged-short>
        public System.IntPtr Target;
    }

    /// <summary>
    /// <p>Contains information about a raw input device.</p>
    /// </summary>
    /// <doc-id>ms645568</doc-id>
    /// <unmanaged>RAWINPUTDEVICELIST</unmanaged>
    /// <unmanaged-short>RAWINPUTDEVICELIST</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawInputDevicelist
    {
        /// <summary>
        /// <dd> <p>A handle to the raw input device. </p> </dd>
        /// </summary>
        /// <doc-id>ms645568</doc-id>
        /// <unmanaged>hDevice</unmanaged>
        /// <unmanaged-short>hDevice</unmanaged-short>
        public System.IntPtr Device;
        /// <summary>
        /// <dd> <p>The type of device. This can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RIM_TYPEHID</strong></dt> <dt>2</dt> </dl> </td><td> <p>The device is an HID that is not a keyboard and not a mouse.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEKEYBOARD</strong></dt> <dt>1</dt> </dl> </td><td> <p>The device is a keyboard.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEMOUSE</strong></dt> <dt>0</dt> </dl> </td><td> <p>The device is a mouse.</p> </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ms645568</doc-id>
        /// <unmanaged>dwType</unmanaged>
        /// <unmanaged-short>dwType</unmanaged-short>
        public System.Int32 Type;
    }

    /// <summary>
    /// <p>Contains the header information that is part of the raw input data. </p>
    /// </summary>
    /// <remarks>
    /// <p>To get more information on the device, use <strong>hDevice</strong> in a call to <strong>GetRawInputDeviceInfo</strong>.</p>
    /// </remarks>
    /// <doc-id>ms645571</doc-id>
    /// <unmanaged>RAWINPUTHEADER</unmanaged>
    /// <unmanaged-short>RAWINPUTHEADER</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawInputHeader
    {
        /// <summary>
        /// <dd> <p>The type of raw input. It can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RIM_TYPEHID</strong></dt> <dt>2</dt> </dl> </td><td> <p>Raw input comes from some device that is not a keyboard or a mouse.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEKEYBOARD</strong></dt> <dt>1</dt> </dl> </td><td> <p>Raw input comes from the keyboard.</p> </td></tr> <tr><td><dl> <dt><strong>RIM_TYPEMOUSE</strong></dt> <dt>0</dt> </dl> </td><td> <p>Raw input comes from the mouse.</p> </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ms645571</doc-id>
        /// <unmanaged>dwType</unmanaged>
        /// <unmanaged-short>dwType</unmanaged-short>
        public SharpDX.RawInput.DeviceType Type;
        /// <summary>
        /// <dd> <p>The size, in bytes, of the entire input packet of data. This includes <strong><see cref = "SharpDX.RawInput.RawInput"/></strong> plus possible extra input reports in the <strong><see cref = "SharpDX.RawInput.RawHid"/></strong> variable length array. </p> </dd>
        /// </summary>
        /// <doc-id>ms645571</doc-id>
        /// <unmanaged>dwSize</unmanaged>
        /// <unmanaged-short>dwSize</unmanaged-short>
        public System.Int32 Size;
        /// <summary>
        /// <dd> <p>A handle to the device generating the raw input data. </p> </dd>
        /// </summary>
        /// <doc-id>ms645571</doc-id>
        /// <unmanaged>hDevice</unmanaged>
        /// <unmanaged-short>hDevice</unmanaged-short>
        public System.IntPtr Device;
        /// <summary>
        /// <dd> <p>The value passed in the  <em>wParam</em> parameter of the <strong>WM_INPUT</strong> message. </p> </dd>
        /// </summary>
        /// <doc-id>ms645571</doc-id>
        /// <unmanaged>wParam</unmanaged>
        /// <unmanaged-short>wParam</unmanaged-short>
        public System.IntPtr Param;
    }

    /// <summary>
    /// No documentation.
    /// </summary>
    /// <unmanaged>RAWINPUT_INNER_0</unmanaged>
    /// <unmanaged-short>RAWINPUT_INNER_0</unmanaged-short>
    internal partial struct RawInputInner0
    {
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>mouse</unmanaged>
        /// <unmanaged-short>mouse</unmanaged-short>
        public SharpDX.RawInput.RawMouse Mouse;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>keyboard</unmanaged>
        /// <unmanaged-short>keyboard</unmanaged-short>
        public SharpDX.RawInput.RawKeyboard Keyboard;
        /// <summary>
        /// No documentation.
        /// </summary>
        /// <unmanaged>hid</unmanaged>
        /// <unmanaged-short>hid</unmanaged-short>
        public SharpDX.RawInput.RawHid Hid;
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 0, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
        internal partial struct __Native
        {
            [System.Runtime.InteropServices.FieldOffset(0)]
            public SharpDX.RawInput.RawMouse Mouse;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public SharpDX.RawInput.RawKeyboard Keyboard;
            [System.Runtime.InteropServices.FieldOffset(0)]
            public SharpDX.RawInput.RawHid.__Native Hid;
        }

        internal unsafe void __MarshalFree(ref __Native @ref)
        {
            Hid.__MarshalFree(ref @ref.Hid);
        }

        internal unsafe void __MarshalFrom(ref __Native @ref)
        {
            Mouse = @ref.Mouse;
            Keyboard = @ref.Keyboard;
            Hid.__MarshalFrom(ref @ref.Hid);
        }

        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Mouse = Mouse;
            @ref.Keyboard = Keyboard;
            Hid.__MarshalTo(ref @ref.Hid);
        }
    }

    /// <summary>
    /// <p>Contains information about the state of the keyboard. </p>
    /// </summary>
    /// <doc-id>ms645575</doc-id>
    /// <unmanaged>RAWKEYBOARD</unmanaged>
    /// <unmanaged-short>RAWKEYBOARD</unmanaged-short>
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 1, CharSet = System.Runtime.InteropServices.CharSet.Unicode)]
    internal partial struct RawKeyboard
    {
        /// <summary>
        /// <dd> <p>The scan code from the key depression. The scan code for keyboard overrun is <strong>KEYBOARD_OVERRUN_MAKE_CODE</strong>. </p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>MakeCode</unmanaged>
        /// <unmanaged-short>MakeCode</unmanaged-short>
        public System.Int16 MakeCode;
        /// <summary>
        /// <dd> <p>Flags for scan code information. It can be one or more of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong>RI_KEY_BREAK</strong></dt> <dt>1</dt> </dl> </td><td> <p>The key is up.</p> </td></tr> <tr><td><dl> <dt><strong>RI_KEY_E0</strong></dt> <dt>2</dt> </dl> </td><td> <p>The scan code has the E0 prefix.
        /// </p> </td></tr> <tr><td><dl> <dt><strong>RI_KEY_E1</strong></dt> <dt>4</dt> </dl> </td><td> <p>The scan code has the E1 prefix.
        /// </p> </td></tr> <tr><td><dl> <dt><strong>RI_KEY_MAKE</strong></dt> <dt>0</dt> </dl> </td><td> <p>The key is down.</p> </td></tr> </table> <p>?</p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>Flags</unmanaged>
        /// <unmanaged-short>Flags</unmanaged-short>
        public SharpDX.RawInput.ScanCodeFlags Flags;
        /// <summary>
        /// <dd> <p>Reserved; must be zero. </p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>Reserved</unmanaged>
        /// <unmanaged-short>Reserved</unmanaged-short>
        public System.Int16 Reserved;
        /// <summary>
        /// <dd> <p>Windows message compatible virtual-key code. For more information, see Virtual Key Codes. </p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>VKey</unmanaged>
        /// <unmanaged-short>VKey</unmanaged-short>
        public System.Int16 VKey;
        /// <summary>
        /// <dd> <p>The corresponding window message, for example <strong>WM_KEYDOWN</strong>, <strong>WM_SYSKEYDOWN</strong>, and so forth. </p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>Message</unmanaged>
        /// <unmanaged-short>Message</unmanaged-short>
        public SharpDX.RawInput.KeyState Message;
        /// <summary>
        /// <dd> <p>The device-specific additional information for the event. </p> </dd>
        /// </summary>
        /// <doc-id>ms645575</doc-id>
        /// <unmanaged>ExtraInformation</unmanaged>
        /// <unmanaged-short>ExtraInformation</unmanaged-short>
        public System.Int32 ExtraInformation;
    }
}